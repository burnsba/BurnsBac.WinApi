<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BurnsBac.WinApi</name>
    </assembly>
    <members>
        <member name="T:WinApi.Error.BadResultException">
            <summary>
            Thrown when a method call does not return success.
            </summary>
        </member>
        <member name="P:WinApi.Error.BadResultException.CallResult">
            <summary>
            Result from call.
            </summary>
        </member>
        <member name="M:WinApi.Error.BadResultException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinApi.Error.BadResultException"/> class.
            </summary>
        </member>
        <member name="M:WinApi.Error.BadResultException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WinApi.Error.BadResultException"/> class.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:WinApi.Error.BadResultException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WinApi.Error.BadResultException"/> class.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:WinApi.Error.BadResultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WinApi.Error.BadResultException"/> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:WinApi.Error.HidpStatusException">
            <summary>
            Exception if HID method does not return success.
            </summary>
        </member>
        <member name="P:WinApi.Error.HidpStatusException.StatusCode">
            <summary>
            Status code that triggered exception.
            </summary>
        </member>
        <member name="M:WinApi.Error.HidpStatusException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinApi.Error.HidpStatusException"/> class.
            </summary>
        </member>
        <member name="M:WinApi.Error.HidpStatusException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WinApi.Error.HidpStatusException"/> class.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:WinApi.Error.HidpStatusException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WinApi.Error.HidpStatusException"/> class.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:WinApi.Error.HidpStatusException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WinApi.Error.HidpStatusException"/> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:WinApi.Error.Win32ErrorCode">
            <summary>
            Exception wrapper for GetLastErrorMessage.
            </summary>
        </member>
        <member name="P:WinApi.Error.Win32ErrorCode.ErrorCode">
            <summary>
            Windows error code.
            </summary>
        </member>
        <member name="M:WinApi.Error.Win32ErrorCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinApi.Error.Win32ErrorCode"/> class.
            </summary>
        </member>
        <member name="M:WinApi.Error.Win32ErrorCode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WinApi.Error.Win32ErrorCode"/> class.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:WinApi.Error.Win32ErrorCode.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WinApi.Error.Win32ErrorCode"/> class.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:WinApi.Error.Win32ErrorCode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WinApi.Error.Win32ErrorCode"/> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:WinApi.Hid.Api">
            <summary>
            Function definitions for hid.dll.
            </summary>
        </member>
        <member name="M:WinApi.Hid.Api.HidP_GetButtonCaps(WinApi.Hid.HidpReportType,System.IntPtr,System.UInt32@,System.IntPtr)">
            <summary>
            HidP_GetButtonCaps returns all the buttons (binary values) that are a part
            of the given report type for the Hid device represented by the given
            preparsed data.
            </summary>
            <param name="reportType">One of HidP_Input, HidP_Output, or HidP_Feature.</param>
            <param name="buttonCaps">
            A _HIDP_BUTTON_CAPS array containing information about all the 
            binary values in the given report.This buffer is provided by
            the caller.
            </param>
            <param name="buttonCapsLength">
            As input, this parameter specifies the length of the
            ButtonCaps parameter(array) in number of array elements.
            As output, this value is set to indicate how many of those
            array elements were filled in by the function.The maximum number of
            button caps that can be returned is found in the HIDP_CAPS
            structure.If HIDP_STATUS_BUFFER_TOO_SMALL is returned,
            this value contains the number of array elements needed to
            successfully complete the request.
            </param>
            <param name="preparsedData">The preparsed data returned from HIDCLASS.</param>
            <returns>HIDP_STATUS_SUCCESS, HIDP_STATUS_INVALID_PREPARSED_DATA.</returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/hidpi/nf-hidpi-hidp_getbuttoncaps
            </remarks>
        </member>
        <member name="M:WinApi.Hid.Api.HidP_GetCaps(System.IntPtr,WinApi.Hid.HidpCaps@)">
            <summary>
            The HidP_GetCaps routine returns a top-level collection's HIDP_CAPS structure.
            </summary>
            <param name="PreparsedData">
            Pointer to a top-level collection's preparsed data.
            </param>
            <param name="Capabilities">
            Pointer to a caller-allocated buffer that the routine uses to return a collection's HIDP_CAPS structure.
            </param>
            <returns>
            HIDP_STATUS_SUCCESS, HIDP_STATUS_INVALID_PREPARSED_DATA.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/hidpi/nf-hidpi-hidp_getcaps
            </remarks>
        </member>
        <member name="M:WinApi.Hid.Api.HidD_GetHidGuid(System.Guid@)">
            <summary>
            The HidD_GetHidGuid routine returns the device interfaceGUID for HIDClass devices.
            </summary>
            <param name="hidGuid">Pointer to a caller-allocated GUID buffer that the routine
            uses to return the device interface GUID for HIDClass devices.</param>
            <remarks>
            https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/hidsdi/nf-hidsdi-hidd_gethidguid
            </remarks>
        </member>
        <member name="M:WinApi.Hid.Api.HidD_GetInputReport(System.Runtime.InteropServices.SafeHandle,System.Byte[],System.UInt32)">
            <summary>
            The HidD_GetInputReport routine returns an input reports from a top-level collection.
            </summary>
            <param name="hidDeviceObject">Specifies an open handle to a top-level collection.</param>
            <param name="report">
            Pointer to a caller-allocated input report buffer that the caller uses to specify a
            HID report ID and HidD_GetInputReport uses to return the specified input report.
            </param>
            <param name="reportBufferLength">
            Specifies the size, in bytes, of the report buffer. The report buffer must be large enough
            to hold the input report -- excluding its report ID, if report IDs are used -- plus
            one additional byte that specifies a nonzero report ID or zero.
            </param>
            <returns>
            HidD_GetInputReport returns TRUE if it succeeds; otherwise, it returns FALSE.
            Use GetLastError to get extended error information.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/hidsdi/nf-hidsdi-hidd_getinputreport
            </remarks>
        </member>
        <member name="M:WinApi.Hid.Api.HidP_MaxUsageListLength(WinApi.Hid.HidpReportType,System.UInt16,System.IntPtr)">
            <summary>
            This function returns the maximum number of usages that a call to
            HidP_GetUsages or HidP_GetUsagesEx could return for a given HID report.
            If calling for number of usages returned by HidP_GetUsagesEx, use 0 as
            the UsagePage value.
            </summary>
            <param name="reportType">One of HidP_Input, HidP_Output or HidP_Feature.</param>
            <param name="usagePage">
            Specifies the optional UsagePage to query for.  If 0, will
            return all the maximum number of usage values that could be
            returned for a given ReportType. If non-zero, will return
            the maximum number of usages that would be returned for the
            ReportType with the given UsagePage.</param>
            <param name="preparsedData">Preparsed data returned from HIDCLASS</param>
            <returns>
            The length of the usage list array required for the HidP_GetUsages or
            HidP_GetUsagesEx function call.If an error occurs(such as
            HIDP_STATUS_INVALID_REPORT_TYPE or HIDP_INVALID_PREPARSED_DATA, this
            returns 0.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/hidpi/nf-hidpi-hidp_maxusagelistlength
            </remarks>
        </member>
        <member name="M:WinApi.Hid.Api.HidD_GetManufacturerString(System.Runtime.InteropServices.SafeHandle,System.IntPtr,System.UInt32)">
            <summary>
            The HidD_GetManufacturerString routine returns a top-level collection's embedded
            string that identifies the manufacturer.
            </summary>
            <param name="hidDeviceObject">
            Specifies an open handle to a top-level collection.
            </param>
            <param name="buffer">
            Pointer to a caller-allocated buffer that the routine uses to return the
            collection's manufacturer string. The routine returns a NULL-terminated wide
            character string in a human-readable format.
            </param>
            <param name="bufferLength">
            Specifies the length, in bytes, of a caller-allocated buffer provided at Buffer. If
            the buffer is not large enough to return the entire NULL-terminated embedded string,
            the routine returns nothing in the buffer.
            </param>
            <returns>
            HidD_HidD_GetManufacturerString returns TRUE if it returns the entire NULL-terminated
            embedded string. Otherwise, the routine returns FALSE. Use GetLastError to get extended
            error information.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/hidsdi/nf-hidsdi-hidd_getmanufacturerstring
            </remarks>
        </member>
        <member name="M:WinApi.Hid.Api.HidD_GetPhysicalDescriptor(System.Runtime.InteropServices.SafeHandle,System.IntPtr,System.UInt32)">
            <summary>
            The HidD_GetPhysicalDescriptor routine returns the embedded string of a top-level
            collection that identifies the collection's physical device.
            </summary>
            <param name="hidDeviceObject">
            Specifies an open handle to a top-level collection.
            </param>
            <param name="buffer">
            Pointer to a caller-allocated buffer that the routine uses to return the requested
            physical descriptor.
            </param>
            <param name="bufferLength">
            Specifies the length, in bytes, of the buffer at Buffer.
            </param>
            <returns>
            HidD_GetPhysicalDescriptor returns TRUE if it succeeds; otherwise, it returns FALSE.
            Use GetLastError to get extended error information.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/hidsdi/nf-hidsdi-hidd_getphysicaldescriptor
            </remarks>
        </member>
        <member name="M:WinApi.Hid.Api.HidD_GetProductString(System.Runtime.InteropServices.SafeHandle,System.IntPtr,System.UInt32)">
            <summary>
            The HidD_GetProductString routine returns the embedded string of a top-level
            collection that identifies the manufacturer's product.
            </summary>
            <param name="hidDeviceObject">
            Specifies an open handle to a top-level collection.
            </param>
            <param name="buffer">
            Pointer to a caller-allocated buffer that the routine uses to return the
            requested product string. The routine returns a NULL-terminated wide character string.
            </param>
            <param name="bufferLength">
            Specifies the length, in bytes, of a caller-allocated buffer provided at Buffer.
            If the buffer is not large enough to return the entire NULL-terminated
            embedded string, the routine returns nothing in the buffer.</param>
            <returns>
            HidD_GetProductString returns TRUE if it successfully returns the entire NULL-terminated
            embedded string. Otherwise, the routine returns FALSE. Use GetLastError to get
            extended error information.
            </returns>
        </member>
        <member name="M:WinApi.Hid.Api.HidD_GetSerialNumberString(System.Runtime.InteropServices.SafeHandle,System.IntPtr,System.UInt32)">
            <summary>
            The HidD_GetSerialNumberString routine returns the embedded string of a top-level
            collection that identifies the serial number of the collection's physical device.
            </summary>
            <param name="hidDeviceObject">
            Specifies an open handle to a top-level collection.
            </param>
            <param name="buffer">
            Pointer to a caller-allocated buffer that the routine uses to return the
            requested serial number string. The routine returns a NULL-terminated wide character string.
            </param>
            <param name="bufferLength">
            Specifies the length, in bytes, of a caller-allocated buffer provided at Buffer.
            If the buffer is not large enough to return the entire NULL-terminated embedded
            string, the routine returns nothing in the buffer.
            </param>
            <returns>
            HidD_GetSerialNumberString returns TRUE if it successfully returns the entire
            NULL-terminated embedded string. Otherwise, the routine returns FALSE. Use
            GetLastError to get extended error information.
            </returns>
        </member>
        <member name="M:WinApi.Hid.Api.HidP_GetUsages(WinApi.Hid.HidpReportType,System.UInt16,System.UInt16,System.UInt16[],System.UInt32@,System.IntPtr,System.Byte[],System.UInt32)">
            <summary>
            This function returns the binary values (buttons) that are set in a HID
            report.Given a report packet of correct length, it searches the report
            packet for each usage for the given usage page and returns them in the
            usage list.
            </summary>
            <param name="reportType">One of HidP_Input, HidP_Output or HidP_Feature.</param>
            <param name="usagePage">
            All of the usages in the usage list, which HidP_GetUsages will
            retrieve in the report, refer to this same usage page.
            If the client wishes to get usages in a packet for multiple
            usage pages then that client needs to make multiple calls
            to HidP_GetUsages.</param>
            <param name="linkCollection">
            An optional value which can limit which usages are returned
            in the UsageList to those usages that exist in a specific
            LinkCollection.A non-zero value indicates the index into
            the HIDP_LINK_COLLECITON_NODE list returned by
            HidP_GetLinkCollectionNodes of the link collection the
            usage should belong to.A value of 0 indicates this
            should value be ignored.
            </param>
            <param name="usageList">
            The usage array that will contain all the usages found in
            the report packet.
            </param>
            <param name="usageLength">
            The length of the given usage array in array elements.
            On input, this value describes the length of the usage list.
            On output, HidP_GetUsages sets this value to the number of
            usages that was found. Use HidP_MaxUsageListLength to
            determine the maximum length needed to return all the usages
            that a given report packet may contain.
            </param>
            <param name="preparsedData">Preparsed data structure returned by HIDCLASS</param>
            <param name="report">The report packet.</param>
            <param name="reportLength">Length (in bytes) of the given report packet</param>
            <returns>
            HIDP_STATUS_SUCCESS,
            HIDP_INVALID_REPORT_LENGTH,
            HIDP_INVALID_REPORT_TYPE,
            HIDP_STATUS_BUFFER_TOO_SMALL,
            HIDP_STATUS_INCOMPATIBLE_REPORT_ID,
            HIDP_STATUS_INVALID_PREPARSED_DATA,
            HIDP_STATUS_USAGE_NOT_FOUND.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/hidpi/nf-hidpi-hidp_getusages
            </remarks>
        </member>
        <member name="M:WinApi.Hid.Api.HidP_GetUsageValue(WinApi.Hid.HidpReportType,System.UInt16,System.UInt16,System.UInt16,System.UInt32@,System.IntPtr,System.Byte[],System.UInt32)">
            <summary>
            HidP_GetUsageValue retrieves the value from the HID Report for the usage
            specified by the combination of usage page, usage and link collection.
            If a report packet contains two different fields with the same
            Usage and UsagePage, they can be distinguished with the optional
            LinkCollection field value.
            </summary>
            <param name="reportType">One of HidP_Input or HidP_Feature.</param>
            <param name="usagePage">The usage page to which the given usage refers.</param>
            <param name="linkCollection">(Optional)  This value can be used to differentiate
            between two fields that may have the same
            UsagePage and Usage but exist in different
            collections.If the link collection value
            is zero, this function will set the first field
            it finds that matches the usage page and
            usage.</param>
            <param name="usage">The usage whose value HidP_GetUsageValue will retrieve</param>
            <param name="usageValue">The raw value that is set for the specified field in the report
            buffer.This value will either fall within the logical range
            or if NULL values are allowed, a number outside the range to
            indicate a NULL</param>
            <param name="preparsedData">The preparsed data returned for HIDCLASS</param>
            <param name="report">The report packet.</param>
            <param name="reportLength">Length (in bytes) of the given report packet.</param>
            <returns>
            HIDP_STATUS_SUCCESS, HIDP_INVALID_REPORT_LENGTH,
            HIDP_INVALID_REPORT_TYPE, HIDP_STATUS_INCOMPATIBLE_REPORT_ID, 
            HIDP_STATUS_INVALID_PREPARSED_DATA, HIDP_STATUS_USAGE_NOT_FOUND.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/hidpi/nf-hidpi-hidp_getusagevalue
            </remarks>
        </member>
        <member name="M:WinApi.Hid.Api.HidP_GetValueCaps(WinApi.Hid.HidpReportType,System.IntPtr,System.UInt32@,System.IntPtr)">
            <summary>
            HidP_GetValueCaps returns all the values (non-binary) that are a part
            of the given report type for the Hid device represented by the given
            preparsed data.
            </summary>
            <param name="reportType">
            Specifies a HIDP_REPORT_TYPE enumerator value that identifies the report type.
            </param>
            <param name="valueCaps">
            Pointer to a caller-allocated buffer in which the routine returns a value
            capability array for the specified report type.</param>
            <param name="valueCapsLength">
            Specifies the length, on input, in array elements, of the ValueCaps buffer. On output,
            the routine sets ValueCapsLength to the number of elements that the it actually returns.
            </param>
            <param name="preparsedData">Pointer to a top-level collection's preparsed data.</param>
            <returns>HIDP_STATUS_SUCCESS, HIDP_STATUS_INVALID_PREPARSED_DATA</returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/hidpi/nf-hidpi-hidp_getvaluecaps
            </remarks>
        </member>
        <member name="T:WinApi.Hid.HidpButtonCaps">
            <summary>
            The <see cref="T:WinApi.Hid.HidpButtonCaps"/> structure contains information about the capability of a
            HID control button usage (or a set of buttons associated with a usage range).
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/hidpi/ns-hidpi-_hidp_button_caps
            https://github.com/tpn/winsdk-10/blob/master/Include/10.0.14393.0/shared/hidpi.h
            </remarks>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCaps.UsagePage">
            <summary>
            Specifies the usage page for a usage or usage range.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCaps.ReportID">
            <summary>
            Specifies the report ID of the HID report that contains the usage or usage range.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCaps.IsAlias">
            <summary>
            Indicates, if TRUE, that a button has a set of aliased usages. Otherwise,
            if IsAlias is FALSE, the button has only one usage.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCaps.BitField">
            <summary>
            Contains the data fields (one or two bytes) associated with an input, output, or feature main item.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCaps.LinkCollection">
            <summary>
            Specifies the index of the link collection in a top-level collection's link
            collection array that contains the usage or usage range.
            If LinkCollection is zero, the usage or usage range is contained in
            the top-level collection.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCaps.LinkUsage">
            <summary>
            Specifies the usage of the link collection that contains the usage or
            usage range. If LinkCollection is zero, LinkUsage specifies the usage of
            the top-level collection.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCaps.LinkUsagePage">
            <summary>
            Specifies the usage page of the link collection that contains the usage or usage
            range. If LinkCollection is zero, LinkUsagePage specifies the usage page of the
            top-level collection.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCaps.IsRange">
            <summary>
            Specifies, if TRUE, that the structure describes a usage range. Otherwise, if
            IsRange is FALSE, the structure describes a single usage.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCaps.IsStringRange">
            <summary>
            Specifies, if TRUE, that the usage or usage range has a set of string
            descriptors. Otherwise, if IsStringRange is FALSE, the usage or usage
            range has zero or one string descriptor.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCaps.IsDesignatorRange">
            <summary>
            Specifies, if TRUE, that the usage or usage range has a set of designators.
            Otherwise, if IsDesignatorRange is FALSE, the usage or usage range has
            zero or one designator.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCaps.IsAbsolute">
            <summary>
            Specifies, if TRUE, that the button usage or usage range provides absolute
            data. Otherwise, if IsAbsolute is FALSE, the button data is the change in
            state from the previous value.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCaps.Reserved">
            <summary>
            Reserved for internal system use.
            </summary>
        </member>
        <member name="T:WinApi.Hid.HidpButtonCapsNotRange">
            <summary>
            Union struct for <see cref="T:WinApi.Hid.HidpButtonCaps"/>.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsNotRange.Reserved1">
            <summary>
            Reserved for internal system use.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsNotRange.Usage">
            <summary>
            Indicates a usage ID.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsNotRange.StringIndex">
            <summary>
            Indicates a string descriptor ID for the usage specified by NotRange.Usage.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsNotRange.Reserved2">
            <summary>
            Reserved for internal system use.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsNotRange.DesignatorIndex">
            <summary>
            Indicates a designator ID for the usage specified by NotRange.Usage.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsNotRange.Reserved3">
            <summary>
            Reserved for internal system use.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsNotRange.DataIndex">
            <summary>
            Indicates the data index of the usage specified by NotRange.Usage.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsNotRange.Reserved4">
            <summary>
            Reserved for internal system use.
            </summary>
        </member>
        <member name="T:WinApi.Hid.HidpButtonCapsRange">
            <summary>
            Union struct for <see cref="T:WinApi.Hid.HidpButtonCaps"/>.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsRange.UsageMin">
            <summary>
            Indicates the inclusive lower bound of usage range whose inclusive upper
            bound is specified by Range.UsageMax.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsRange.UsageMax">
            <summary>
            Indicates the inclusive upper bound of a usage range whose inclusive lower
            bound is indicated by Range.UsageMin.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsRange.StringMin">
            <summary>
            Indicates the inclusive lower bound of a range of string descriptors (specified by string
            minimum and string maximum items) whose inclusive upper bound is indicated by Range.StringMax.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsRange.StringMax">
            <summary>
            Indicates the inclusive upper bound of a range of string descriptors (specified by string
            minimum and string maximum items) whose inclusive lower bound is indicated by Range.StringMin.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsRange.DesignatorMin">
            <summary>
            Indicates the inclusive lower bound of a range of designators (specified by designator
            minimum and designator maximum items) whose inclusive lower bound is indicated by Range.DesignatorMax.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsRange.DesignatorMax">
            <summary>
            Indicates the inclusive upper bound of a range of designators (specified by designator
            minimum and designator maximum items) whose inclusive lower bound is indicated by Range.DesignatorMin.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsRange.DataIndexMin">
            <summary>
            Indicates the inclusive lower bound of a sequential range of data indices that correspond,
            one-to-one and in the same order, to the usages specified by the usage range Range.UsageMin to Range.UsageMax.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpButtonCapsRange.DataIndexMax">
            <summary>
            Indicates the inclusive upper bound of a sequential range of data indices that correspond,
            one-to-one and in the same order, to the usages specified by the usage range
            Range.UsageMin to Range.UsageMax.
            </summary>
        </member>
        <member name="T:WinApi.Hid.HidpCaps">
            <summary>
            The HIDP_CAPS structure contains information about a top-level collection's capability.
            </summary>
            <remarks>
            https://www.pinvoke.net/default.aspx/hid/HIDP_CAPS.html
            https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/hidpi/ns-hidpi-_hidp_caps
            </remarks>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.Usage">
            <summary>
            Specifies a top-level collection's usage ID.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.UsagePage">
            <summary>
            Specifies the top-level collection's usage page.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.InputReportByteLength">
            <summary>
            Specifies the maximum size, in bytes, of all the input reports (including the report ID, if report IDs are used, which is prepended to the report data).
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.OutputReportByteLength">
            <summary>
            Specifies the maximum size, in bytes, of all the output reports (including the report ID, if report IDs are used, which is prepended to the report data).
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.FeatureReportByteLength">
            <summary>
            Specifies the maximum length, in bytes, of all the feature reports (including the report ID, if report IDs are used, which is prepended to the report data).
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.Reserved">
            <summary>
            Reserved for internal system use.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.NumberLinkCollectionNodes">
            <summary>
            Specifies the number of HIDP_LINK_COLLECTION_NODE structures that are returned for this top-level collection by HidP_GetLinkCollectionNodes.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.NumberInputButtonCaps">
            <summary>
            Specifies the number of input HIDP_BUTTON_CAPS structures that HidP_GetButtonCaps returns.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.NumberInputValueCaps">
            <summary>
            Specifies the number of input HIDP_VALUE_CAPS structures that HidP_GetValueCaps returns.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.NumberInputDataIndices">
            <summary>
            Specifies the number of data indices assigned to buttons and values in all input reports.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.NumberOutputButtonCaps">
            <summary>
            Specifies the number of output HIDP_BUTTON_CAPS structures that HidP_GetButtonCaps returns.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.NumberOutputValueCaps">
            <summary>
            Specifies the number of output HIDP_VALUE_CAPS structures that HidP_GetValueCaps returns.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.NumberOutputDataIndices">
            <summary>
            Specifies the number of data indices assigned to buttons and values in all output reports.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.NumberFeatureButtonCaps">
            <summary>
            Specifies the total number of feature HIDP_BUTTONS_CAPS structures that HidP_GetButtonCaps returns.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.NumberFeatureValueCaps">
            <summary>
            Specifies the total number of feature HIDP_VALUE_CAPS structures that HidP_GetValueCaps returns.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpCaps.NumberFeatureDataIndices">
            <summary>
            Specifies the number of data indices assigned to buttons and values in all feature reports.
            </summary>
        </member>
        <member name="T:WinApi.Hid.HidpReportType">
            <summary>
            The HIDP_REPORT_TYPE enumeration type is used to specify a HID report type.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/hidpi/ne-hidpi-_hidp_report_type
            </remarks>
        </member>
        <member name="F:WinApi.Hid.HidpReportType.HidP_Input">
            <summary>
            Indicates an input report.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpReportType.HidP_Output">
            <summary>
            Indicates an output report.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpReportType.HidP_Feature">
            <summary>
            Indicates a feature report.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpStatus.HIDP_STATUS_SUCCESS">
            <summary>
            upon successfully retrieving all the usages from the report packet
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpStatus.HIDP_STATUS_INVALID_PREPARSED_DATA">
            <summary>
            if PreparsedData is not valid
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpStatus.HIDP_STATUS_INVALID_REPORT_TYPE">
            <summary>
            if ReportType is not valid.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpStatus.HIDP_STATUS_INVALID_REPORT_LENGTH">
            <summary>
            the length of the report packet is not equal to the length specified in
            the HIDP_CAPS structure for the given
            ReportType
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpStatus.HIDP_STATUS_USAGE_NOT_FOUND">
            <summary>
            if there are no usages in a reports for
            the device and ReportType that match the
            UsagePage and LinkCollection that were
            specified
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpStatus.HIDP_STATUS_BUFFER_TOO_SMALL">
            <summary>
            if the UsageList is not big enough to
            hold all the usages found in the report
            packet.  If this is returned, the buffer
            will contain UsageLength number of
            usages.  Use HidP_MaxUsageListLength to
            find the maximum length needed
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpStatus.HIDP_STATUS_INCOMPATIBLE_REPORT_ID">
            <summary>
            if no usages were found but usages
            that match the UsagePage and
            LinkCollection specified could be found
            in a report with a different report ID
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpStatus.HIDP_STATUS_REPORT_DOES_NOT_EXIST">
            <summary>
            if there are no reports on this device
            for the given ReportType
            </summary>
        </member>
        <member name="T:WinApi.Hid.HidpValueCaps">
            <summary>
            The HIDP_VALUE_CAPS structure contains information that describes the capability of a set of HID control values (either a single usage or a usage range).
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/hidpi/ns-hidpi-_hidp_value_caps
            https://github.com/tpn/winsdk-10/blob/master/Include/10.0.14393.0/shared/hidpi.h
            </remarks>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.UsagePage">
            <summary>
            Specifies the usage page of the usage or usage range.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.ReportID">
            <summary>
            Specifies the report ID of the HID report that contains the usage or usage range.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.IsAlias">
            <summary>
            Indicates, if TRUE, that the usage is member of a set of aliased usages.
            Otherwise, if IsAlias is FALSE, the value has only one usage.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.BitField">
            <summary>
            Contains the data fields (one or two bytes) associated with an input,
            output, or feature main item.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.LinkCollection">
            <summary>
            Specifies the index of the link collection in a top-level collection's link
            collection array that contains the usage or usage range. If
            LinkCollection is zero, the usage or usage range is contained in the top-level collection.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.LinkUsage">
            <summary>
            Specifies the usage of the link collection that contains the usage
            or usage range. If LinkCollection is zero, LinkUsage specifies the
            usage of the top-level collection.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.LinkUsagePage">
            <summary>
            Specifies the usage page of the link collection that contains the
            usage or usage range. If LinkCollection is zero, LinkUsagePage
            specifies the usage page of the top-level collection.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.IsRange">
            <summary>
            Specifies, if TRUE, that the structure describes a usage range.
            Otherwise, if IsRange is FALSE, the structure describes a single usage.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.IsStringRange">
            <summary>
            Specifies, if TRUE, that the usage or usage range has a set of
            string descriptors. Otherwise, if IsStringRange is FALSE, the usage
            or usage range has zero or one string descriptor.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.IsDesignatorRange">
            <summary>
            Specifies, if TRUE, that the usage or usage range has a set of
            designators. Otherwise, if IsDesignatorRange is FALSE, the usage
            or usage range has zero or one designator.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.IsAbsolute">
            <summary>
            Specifies, if TRUE, that the usage or usage range provides
            absolute data. Otherwise, if IsAbsolute is FALSE, the value
            is the change in state from the previous value.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.HasNull">
            <summary>
            Specifies, if TRUE, that the usage supports a NULL value, which
            indicates that the data is not valid and should be ignored.
            Otherwise, if HasNull is FALSE, the usage does not have a NULL value.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.Reserved">
            <summary>
            Reserved for internal system use.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.BitSize">
            <summary>
            Specifies the size, in bits, of a usage's data field in a report. If
            ReportCount is greater than one, each usage has a separate data field of this size.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.ReportCount">
            <summary>
            Specifies the number of usages that this structure describes.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.Reserved2a">
            <summary>
            Reserved for internal system use.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.UnitsExp">
            <summary>
            Specifies the usage's exponent, as described by the USB HID standard.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.Units">
            <summary>
            Specifies the usage's units, as described by the USB HID Standard.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.LogicalMin">
            <summary>
            Specifies a usage's signed lower bound.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.LogicalMax">
            <summary>
            Specifies a usage's signed upper bound.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.PhysicalMin">
            <summary>
            Specifies a usage's signed lower bound after scaling is applied to the logical minimum value.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueCaps.PhysicalMax">
            <summary>
            Specifies a usage's signed upper bound after scaling is applied to the logical maximum value.
            </summary>
        </member>
        <member name="T:WinApi.Hid.HidpValueValueCapsNotRange">
            <summary>
            Union struct for <see cref="T:WinApi.Hid.HidpValueCaps"/>.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsNotRange.Reserved1">
            <summary>
            Reserved for internal system use.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsNotRange.Usage">
            <summary>
            Indicates a usage ID.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsNotRange.StringIndex">
            <summary>
            Indicates a string descriptor ID for the usage specified by NotRange.Usage.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsNotRange.Reserved2">
            <summary>
            Reserved for internal system use.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsNotRange.DesignatorIndex">
            <summary>
            Indicates a designator ID for the usage specified by NotRange.Usage.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsNotRange.Reserved3">
            <summary>
            Reserved for internal system use.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsNotRange.DataIndex">
            <summary>
            Indicates the data index of the usage specified by NotRange.Usage.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsNotRange.Reserved4">
            <summary>
            Reserved for internal system use.
            </summary>
        </member>
        <member name="T:WinApi.Hid.HidpValueValueCapsRange">
            <summary>
            Union struct for <see cref="T:WinApi.Hid.HidpValueCaps"/>.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsRange.UsageMin">
            <summary>
            Indicates the inclusive lower bound of usage range whose inclusive upper bound is specified by Range.UsageMax.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsRange.UsageMax">
            <summary>
            Indicates the inclusive upper bound of a usage range whose inclusive lower bound
            is indicated by Range.UsageMin.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsRange.StringMin">
            <summary>
            Indicates the inclusive lower bound of a range of string descriptors (specified
            by string minimum and string maximum items) whose inclusive upper bound is
            indicated by Range.StringMax.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsRange.StringMax">
            <summary>
            Indicates the inclusive upper bound of a range of string descriptors (specified
            by string minimum and string maximum items) whose inclusive lower bound is
            indicated by Range.StringMin.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsRange.DesignatorMin">
            <summary>
            Indicates the inclusive lower bound of a range of designators (specified by
            designator minimum and designator maximum items) whose inclusive lower bound is
            indicated by Range.DesignatorMax.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsRange.DesignatorMax">
            <summary>
            Indicates the inclusive upper bound of a range of designators (specified by
            designator minimum and designator maximum items) whose inclusive lower bound is
            indicated by Range.DesignatorMin.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsRange.DataIndexMin">
            <summary>
            Indicates the inclusive lower bound of a sequential range of data indices that
            correspond, one-to-one and in the same order, to the usages specified by the
            usage range Range.UsageMin to Range.UsageMax.
            </summary>
        </member>
        <member name="F:WinApi.Hid.HidpValueValueCapsRange.DataIndexMax">
            <summary>
            Indicates the inclusive upper bound of a sequential range of data indices that
            correspond, one-to-one and in the same order, to the usages specified by the
            usage range Range.UsageMin to Range.UsageMax.
            </summary>
        </member>
        <member name="T:WinApi.Hid.HidUsagePages">
            <summary>
            HID Usage pages.
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Managed">
            <summary>
            Managed wrapper for hid calls. Handles pointers, memory allocation, and return results.
            </summary>
        </member>
        <member name="M:WinApi.Hid.Managed.HidD_GetManufacturerString(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Calls hid.HidD_GetManufacturerString.
            </summary>
            <param name="handle">Open file handle for device.</param>
            <returns>Manufacturer.</returns>
        </member>
        <member name="M:WinApi.Hid.Managed.HidD_GetPhysicalDescriptor(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Calls hid.HidD_GetPhysicalDescriptor.
            </summary>
            <param name="handle">Open file handle for device.</param>
            <returns>Physical descriptor.</returns>
        </member>
        <member name="M:WinApi.Hid.Managed.HidD_GetProductString(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Calls hid.HidD_GetProductString.
            </summary>
            <param name="handle">Open file handle for device.</param>
            <returns>Product string.</returns>
        </member>
        <member name="M:WinApi.Hid.Managed.HidD_GetSerialNumberString(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Calls hid.HidD_GetSerialNumberString.
            </summary>
            <param name="handle">Open file handle for device.</param>
            <returns>Serial number.</returns>
        </member>
        <member name="T:WinApi.Hid.Usage.AlphnumericDisplay">
            <summary>
            Usages for AlphnumericDisplay usage page (20).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Usage.BatterySystem">
            <summary>
            Usages for BatterySystem usage page (133).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Usage.Consumer">
            <summary>
            Usages for Consumer usage page (12).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Usage.Digitizer">
            <summary>
            Usages for Digitizer usage page (13).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Usage.GameControl">
            <summary>
            Usages for Game Control usage page (5).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Usage.GenericDesktop">
            <summary>
            Usages for Generic Desktop usage page (1).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Usage.Keyboard">
            <summary>
            Usages for Keyboard usage page (7).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Usage.LED">
            <summary>
            Usages for LED usage page (8).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="F:WinApi.Hid.Usage.LED.Reserved_generic">
            <summary>
            0x4C-FFFF = Reserved
            </summary>
        </member>
        <member name="T:WinApi.Hid.Usage.Monitor">
            <summary>
            Usages for Monitor usage page (128).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Usage.PowerDevice">
            <summary>
            Usages for PowerDevice usage page (132).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Usage.SimulationControl">
            <summary>
            Usages for SimulationControl usage page (2).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Usage.SportsControl">
            <summary>
            Usages for Sports Control usage page (4).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Usage.Telephony">
            <summary>
            Usages for Telephony usage page (11).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Usage.VESACommand">
            <summary>
            Usages for VESACommand usage page (131).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Usage.VESAVirtualControls">
            <summary>
            Usages for VESAVirtualControls usage page (130).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Hid.Usage.VRControl">
            <summary>
            Usages for VRControl usage page (3).
            </summary>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="M:WinApi.Hid.Utility.UsagePageAndUsageToString(System.Int32,System.Int32)">
            <summary>
            Converts usage page and usage into a friendly name.
            </summary>
            <param name="usagePageRaw">Usage page.</param>
            <param name="usageRaw">Usage from usage page.</param>
            <returns>Converted value, or originial int if not found.</returns>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="M:WinApi.Hid.Utility.UsagePageToString(System.Int32)">
            <summary>
            Converts usage page into a friendly name.
            </summary>
            <param name="usagePageRaw">Usage page.</param>
            <returns>Converted value, or originial int if not found.</returns>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Kernel32.Api">
            <summary>
            Function definitions for kernel32.dll.
            </summary>
        </member>
        <member name="M:WinApi.Kernel32.Api.CreateFile(System.String,System.IO.FileAccess,System.IO.FileShare,System.IntPtr,System.IO.FileMode,System.IO.FileAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file,
            file stream, directory, physical disk, volume, console buffer, tape drive, communications
            resource, mailslot, and pipe. The function returns a handle that can be used to access the
            file or device for various types of I/O depending on the file or device and the flags and
            attributes specified.
            To perform this operation as a transacted operation, which results in a handle that can
            be used for transacted I/O, use the CreateFileTransacted function.
            </summary>
            <param name="lpFileName">
            The name of the file or device to be created or opened. You may use either forward
            slashes (/) or backslashes () in this name.
            In the ANSI version of this function, the name is limited to MAX_PATH characters.
            To extend this limit to 32,767 wide characters, call the Unicode version of the
            function and prepend "\?" to the path.For more information, see Naming Files,
            Paths, and Namespaces.
            For information on special device names, see Defining an MS-DOS Device Name.
            To create a file stream, specify the name of the file, a colon, and then the
            name of the stream.For more information, see File Streams.
            </param>
            <param name="dwDesiredAccess">
            The requested access to the file or device, which can be summarized as read, write, 
            both or neither zero).
            The most commonly used values are GENERIC_READ, GENERIC_WRITE, or both
            (GENERIC_READ | GENERIC_WRITE). For more information, see Generic Access Rights,
            File Security and Access Rights, File Access Rights Constants, and ACCESS_MASK.
            If this parameter is zero, the application can query certain metadata such as
            file, directory, or device attributes without accessing that file or device,
            even if GENERIC_READ access would have been denied.
            You cannot request an access mode that conflicts with the sharing mode that
            is specified by the dwShareMode parameter in an open request that already
            has an open handle.
            </param>
            <param name="dwShareMode">
            The requested sharing mode of the file or device, which can be read, write,
            both, delete, all of these, or none (refer to the following table). Access
            requests to attributes or extended attributes are not affected by this flag.
            If this parameter is zero and CreateFile succeeds, the file or device cannot
            be shared and cannot be opened again until the handle to the file or device
            is closed.For more information, see the Remarks section.
            You cannot request a sharing mode that conflicts with the access mode that
            is specified in an existing request that has an open handle. CreateFile
            would fail and the GetLastError function would return ERROR_SHARING_VIOLATION.
            </param>
            <param name="lpSecurityAttributes">
            A pointer to a SECURITY_ATTRIBUTES structure that contains two separate but
            related data members: an optional security descriptor, and a Boolean value
            that determines whether the returned handle can be inherited by child processes.
            This parameter can be NULL.
            If this parameter is NULL, the handle returned by CreateFile cannot be inherited
            by any child processes the application may create and the file or device
            associated with the returned handle gets a default security descriptor.
            The lpSecurityDescriptor member of the structure specifies a SECURITY_DESCRIPTOR
            for a file or device. If this member is NULL, the file or device associated with
            the returned handle is assigned a default security descriptor.
            CreateFile ignores the lpSecurityDescriptor member when opening an existing file
            or device, but continues to use the bInheritHandle member.
            The bInheritHandlemember of the structure specifies whether the returned handle
            can be inherited.</param>
            <param name="dwCreationDisposition">
            An action to take on a file or device that exists or does not exist.
            For devices other than files, this parameter is usually set to OPEN_EXISTING.</param>
            <param name="dwFlagsAndAttributes">
            The file or device attributes and flags, FILE_ATTRIBUTE_NORMAL being the
            most common default value for files.
            This parameter can include any combination of the available file attributes
            (FILE_ATTRIBUTE_*). All other file attributes override FILE_ATTRIBUTE_NORMAL.
            This parameter can also contain combinations of flags(FILE_FLAG_) for control
            of file or device caching behavior, access modes, and other special-purpose flags.
            These combine with any FILE_ATTRIBUTE_ values.
            This parameter can also contain Security Quality of Service (SQOS) information by
            specifying the SECURITY_SQOS_PRESENT flag.Additional SQOS-related flags information
            is presented in the table following the attributes and flags tables.</param>
            <param name="hTemplateFile">
            A valid handle to a template file with the GENERIC_READ access right. The
            template file supplies file attributes and extended attributes for the file that is
            being created.
            This parameter can be NULL.
            When opening an existing file, CreateFile ignores this parameter.
            When opening a new encrypted file, the file inherits the discretionary access control
            list from its parent directory.For additional information, see File Encryption.
            </param>
            <returns>
            If the function succeeds, the return value is an open handle to the specified
            file, device, named pipe, or mail slot.
            If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended
            error information, call GetLastError.</returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea
            </remarks>
        </member>
        <member name="M:WinApi.Kernel32.Api.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file,
            file stream, directory, physical disk, volume, console buffer, tape drive, communications
            resource, mailslot, and pipe. The function returns a handle that can be used to access the
            file or device for various types of I/O depending on the file or device and the flags and
            attributes specified.
            To perform this operation as a transacted operation, which results in a handle that can
            be used for transacted I/O, use the CreateFileTransacted function.
            </summary>
            <param name="lpFileName">
            The name of the file or device to be created or opened. You may use either forward
            slashes (/) or backslashes () in this name.
            In the ANSI version of this function, the name is limited to MAX_PATH characters.
            To extend this limit to 32,767 wide characters, call the Unicode version of the
            function and prepend "\?" to the path.For more information, see Naming Files,
            Paths, and Namespaces.
            For information on special device names, see Defining an MS-DOS Device Name.
            To create a file stream, specify the name of the file, a colon, and then the
            name of the stream.For more information, see File Streams.
            </param>
            <param name="dwDesiredAccess">
            The requested access to the file or device, which can be summarized as read, write, 
            both or neither zero).
            The most commonly used values are GENERIC_READ, GENERIC_WRITE, or both
            (GENERIC_READ | GENERIC_WRITE). For more information, see Generic Access Rights,
            File Security and Access Rights, File Access Rights Constants, and ACCESS_MASK.
            If this parameter is zero, the application can query certain metadata such as
            file, directory, or device attributes without accessing that file or device,
            even if GENERIC_READ access would have been denied.
            You cannot request an access mode that conflicts with the sharing mode that
            is specified by the dwShareMode parameter in an open request that already
            has an open handle.
            </param>
            <param name="dwShareMode">
            The requested sharing mode of the file or device, which can be read, write,
            both, delete, all of these, or none (refer to the following table). Access
            requests to attributes or extended attributes are not affected by this flag.
            If this parameter is zero and CreateFile succeeds, the file or device cannot
            be shared and cannot be opened again until the handle to the file or device
            is closed.For more information, see the Remarks section.
            You cannot request a sharing mode that conflicts with the access mode that
            is specified in an existing request that has an open handle. CreateFile
            would fail and the GetLastError function would return ERROR_SHARING_VIOLATION.
            </param>
            <param name="lpSecurityAttributes">
            A pointer to a SECURITY_ATTRIBUTES structure that contains two separate but
            related data members: an optional security descriptor, and a Boolean value
            that determines whether the returned handle can be inherited by child processes.
            This parameter can be NULL.
            If this parameter is NULL, the handle returned by CreateFile cannot be inherited
            by any child processes the application may create and the file or device
            associated with the returned handle gets a default security descriptor.
            The lpSecurityDescriptor member of the structure specifies a SECURITY_DESCRIPTOR
            for a file or device. If this member is NULL, the file or device associated with
            the returned handle is assigned a default security descriptor.
            CreateFile ignores the lpSecurityDescriptor member when opening an existing file
            or device, but continues to use the bInheritHandle member.
            The bInheritHandlemember of the structure specifies whether the returned handle
            can be inherited.</param>
            <param name="dwCreationDisposition">
            An action to take on a file or device that exists or does not exist.
            For devices other than files, this parameter is usually set to OPEN_EXISTING.</param>
            <param name="dwFlagsAndAttributes">
            The file or device attributes and flags, FILE_ATTRIBUTE_NORMAL being the
            most common default value for files.
            This parameter can include any combination of the available file attributes
            (FILE_ATTRIBUTE_*). All other file attributes override FILE_ATTRIBUTE_NORMAL.
            This parameter can also contain combinations of flags(FILE_FLAG_) for control
            of file or device caching behavior, access modes, and other special-purpose flags.
            These combine with any FILE_ATTRIBUTE_ values.
            This parameter can also contain Security Quality of Service (SQOS) information by
            specifying the SECURITY_SQOS_PRESENT flag.Additional SQOS-related flags information
            is presented in the table following the attributes and flags tables.</param>
            <param name="hTemplateFile">
            A valid handle to a template file with the GENERIC_READ access right. The
            template file supplies file attributes and extended attributes for the file that is
            being created.
            This parameter can be NULL.
            When opening an existing file, CreateFile ignores this parameter.
            When opening a new encrypted file, the file inherits the discretionary access control
            list from its parent directory.For additional information, see File Encryption.
            </param>
            <returns>
            If the function succeeds, the return value is an open handle to the specified
            file, device, named pipe, or mail slot.
            If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended
            error information, call GetLastError.</returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea
            </remarks>
        </member>
        <member name="M:WinApi.Kernel32.Api.GetModuleHandle(System.String)">
            <summary>
            Retrieves a module handle for the specified module. The
            module must have been loaded by the calling process.
            To avoid the race conditions described in the Remarks section,
            use the GetModuleHandleEx function.
            </summary>
            <param name="lpModuleName">
            <para>The name of the loaded module (either a .dll or .exe file). If the file
            name extension is omitted, the default library extension .dll is appended. The
            file name string can include a trailing point character (.) to indicate that the
            module name has no extension. The string does not have to specify a path. When
            specifying a path, be sure to use backslashes (), not forward slashes (/). The name
            is compared (case independently) to the names of modules currently mapped into the
            address space of the calling process.
            </para>
            <para>If this parameter is NULL, GetModuleHandle returns a handle to the file used
            to create the calling process (.exe file).
            </para>
            <para>The GetModuleHandle function does not retrieve handles for modules that were
            loaded using the LOAD_LIBRARY_AS_DATAFILE flag. For more information, see LoadLibraryEx.
            </para>
            </param>
            <returns><para>If the function succeeds, the return value is a handle to the
            specified module.
            </para>
            <para>If the function fails, the return value is NULL. To
            get extended error information, call GetLastError.
            </para></returns>
        </member>
        <member name="T:WinApi.Kernel32.CreateFileDesiredAccess">
            <summary>
            The System.IO flags do not support file access for devices.
            </summary>
            <remarks>
            https://www.pinvoke.net/default.aspx/kernel32.CreateFile
            </remarks>
        </member>
        <member name="T:WinApi.SetupApi.Api">
            <summary>
            Function definitions for setupapi.dll.
            </summary>
        </member>
        <member name="M:WinApi.SetupApi.Api.CM_Get_Device_IDW(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The CM_Get_Device_ID function retrieves the device instance ID for a specified device instance on the local machine.
            </summary>
            <param name="dnDevInst">
            Caller-supplied device instance handle that is bound to the local machine.
            </param>
            <param name="Buffer">
            Address of a buffer to receive a device instance ID string. The required buffer size can be obtained by
            calling CM_Get_Device_ID_Size, then incrementing the received value to allow room for the string's
            terminating NULL.</param>
            <param name="BufferLen">
            Caller-supplied length, in characters, of the buffer specified by Buffer.
            </param>
            <param name="ulFlags">
            Not used, must be zero.
            </param>
            <returns>
            If the operation succeeds, the function returns CR_SUCCESS. Otherwise, it returns one
            of the CR_-prefixed error codes defined in Cfgmgr32.h.</returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/cfgmgr32/nf-cfgmgr32-cm_get_device_idw
            </remarks>
        </member>
        <member name="M:WinApi.SetupApi.Api.CM_Get_Parent(System.IntPtr@,System.UInt32,System.Int32)">
            <summary>
            The CM_Get_Parent function obtains a device instance handle to the parent node of
            a specified device node (devnode) in the local machine's device tree.
            </summary>
            <param name="pdnDevInst">
            Caller-supplied pointer to the device instance handle to the parent node
            that this function retrieves. The retrieved handle is bound to the local machine.
            </param>
            <param name="dnDevInst">
            Caller-supplied device instance handle that is bound to the local machine.
            </param>
            <param name="ulFlags">
            Not used, must be zero.
            </param>
            <returns>
            If the operation succeeds, the function returns CR_SUCCESS. Otherwise, it returns
            one of the CR_-prefixed error codes defined in Cfgmgr32.h.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/cfgmgr32/nf-cfgmgr32-cm_get_parent
            </remarks>
        </member>
        <member name="M:WinApi.SetupApi.Api.SetupDiDestroyDeviceInfoList(System.IntPtr)">
            <summary>
            The SetupDiDestroyDeviceInfoList function deletes a device information set and frees all associated memory.
            </summary>
            <param name="deviceInfoSet">A handle to the device information set to delete.</param>
            <returns>The function returns TRUE if it is successful. Otherwise, it returns FALSE and the
            logged error can be retrieved with a call to GetLastError.</returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/setupapi/nf-setupapi-setupdidestroydeviceinfolist
            </remarks>
        </member>
        <member name="M:WinApi.SetupApi.Api.SetupDiEnumDeviceInterfaces(System.IntPtr,System.IntPtr,System.Guid@,System.UInt32,WinApi.SetupApi.SpDeviceInterfaceData@)">
            <summary>
            The SetupDiEnumDeviceInterfaces function enumerates the device interfaces that
            are contained in a device information set.
            </summary>
            <param name="hDevInfo">
            A pointer to a device information set that contains the device interfaces for
            which to return information. This handle is typically returned by SetupDiGetClassDevs.
            </param>
            <param name="devInfo">
            A pointer to an <see cref="T:WinApi.SetupApi.SpDevInfoData"/> structure that specifies a device information element
            in DeviceInfoSet. This parameter is optional and can be NULL. If this parameter is
            specified, SetupDiEnumDeviceInterfaces constrains the enumeration to the interfaces
            that are supported by the specified device. If this parameter is NULL, repeated calls
            to SetupDiEnumDeviceInterfaces return information about the interfaces that are
            associated with all the device information elements in DeviceInfoSet. This pointer
            is typically returned by SetupDiEnumDeviceInfo.
            </param>
            <param name="interfaceClassGuid">
            A pointer to a GUID that specifies the device interface class for the requested interface.
            </param>
            <param name="memberIndex">
            A zero-based index into the list of interfaces in the device information set. The caller
            should call this function first with MemberIndex set to zero to obtain the first
            interface. Then, repeatedly increment MemberIndex and retrieve an interface until
            this function fails and GetLastError returns ERROR_NO_MORE_ITEMS.
            If DeviceInfoData specifies a particular device, the MemberIndex is relative to only
            the interfaces exposed by that device.
            </param>
            <param name="deviceInterfaceData">
            A pointer to a caller-allocated buffer that contains, on successful return, a completed
            <see cref="T:WinApi.SetupApi.SpDeviceInterfaceData" /> structure that identifies an interface that meets the search
            parameters. The caller must set DeviceInterfaceData.cbSize to sizeof(<see cref="T:WinApi.SetupApi.SpDeviceInterfaceData" />)
            before calling this function.
            </param>
            <returns>
            SetupDiEnumDeviceInterfaces returns TRUE if the function completed without error. If
            the function completed with an error, FALSE is returned and the error code for the
            failure can be retrieved by calling GetLastError.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/setupapi/nf-setupapi-setupdienumdeviceinterfaces
            </remarks>
        </member>
        <member name="M:WinApi.SetupApi.Api.SetupDiEnumDeviceInterfaces(System.IntPtr,WinApi.SetupApi.SpDevInfoData@,System.Guid@,System.UInt32,WinApi.SetupApi.SpDeviceInterfaceData@)">
            <summary>
            The SetupDiEnumDeviceInterfaces function enumerates the device interfaces that
            are contained in a device information set.
            </summary>
            <param name="hDevInfo">
            A pointer to a device information set that contains the device interfaces for
            which to return information. This handle is typically returned by SetupDiGetClassDevs.
            </param>
            <param name="devInfo">
            A pointer to an <see cref="T:WinApi.SetupApi.SpDevInfoData"/> structure that specifies a device information element
            in DeviceInfoSet. This parameter is optional and can be NULL. If this parameter is
            specified, SetupDiEnumDeviceInterfaces constrains the enumeration to the interfaces
            that are supported by the specified device. If this parameter is NULL, repeated calls
            to SetupDiEnumDeviceInterfaces return information about the interfaces that are
            associated with all the device information elements in DeviceInfoSet. This pointer
            is typically returned by SetupDiEnumDeviceInfo.
            </param>
            <param name="interfaceClassGuid">
            A pointer to a GUID that specifies the device interface class for the requested interface.
            </param>
            <param name="memberIndex">
            A zero-based index into the list of interfaces in the device information set. The caller
            should call this function first with MemberIndex set to zero to obtain the first
            interface. Then, repeatedly increment MemberIndex and retrieve an interface until
            this function fails and GetLastError returns ERROR_NO_MORE_ITEMS.
            If DeviceInfoData specifies a particular device, the MemberIndex is relative to only
            the interfaces exposed by that device.
            </param>
            <param name="deviceInterfaceData">
            A pointer to a caller-allocated buffer that contains, on successful return, a completed
            <see cref="T:WinApi.SetupApi.SpDeviceInterfaceData" /> structure that identifies an interface that meets the search
            parameters. The caller must set DeviceInterfaceData.cbSize to sizeof(<see cref="T:WinApi.SetupApi.SpDeviceInterfaceData" />)
            before calling this function.
            </param>
            <returns>
            SetupDiEnumDeviceInterfaces returns TRUE if the function completed without error. If
            the function completed with an error, FALSE is returned and the error code for the
            failure can be retrieved by calling GetLastError.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/setupapi/nf-setupapi-setupdienumdeviceinterfaces
            </remarks>
        </member>
        <member name="M:WinApi.SetupApi.Api.SetupDiGetClassDevsW(System.Guid@,System.String,System.IntPtr,System.UInt32)">
            <summary>
            The SetupDiGetClassDevs function returns a handle to a device information set that contains
            requested device information elements for a local computer.
            </summary>
            <param name="classGuid">
            A pointer to the GUID for a device setup class or a device interface class. This pointer is
            optional and can be NULL. For more information about how to set ClassGuid, see the following
            Remarks section.
            </param>
            <param name="enumerator">
            A pointer to a NULL-terminated string that specifies:
            <list type="bullet">
            <term>
            An identifier(ID) of a Plug and Play(PnP) enumerator.This ID can either be the value's
            globally unique identifier (GUID) or symbolic name. For example, "PCI" can be used to specify
            the PCI PnP value. Other examples of symbolic names for PnP values include "USB," "PCMCIA,"
            and "SCSI".
            </term>
            <term>
            A PnP device instance ID. When specifying a PnP device instance ID, DIGCF_DEVICEINTERFACE
            must be set in the Flags parameter.
            </term>
            </list>
            This pointer is optional and can be NULL.If an enumeration value is not used to select
            devices, set Enumerator to NULL</param>
            <param name="hwndParent">
            A handle to the top-level window to be used for a user interface that is associated with
            installing a device instance in the device information set. This handle is optional and
            can be NULL.
            </param>
            <param name="flags">
            A variable of type DWORD that specifies control options that filter the device information
            elements that are added to the device information set. This parameter can be a bitwise OR
            of zero or more of the following flags.
            </param>
            <returns>
            If the operation succeeds, SetupDiGetClassDevs returns a handle to a device information set
            that contains all installed devices that matched the supplied parameters. If the operation
            fails, the function returns INVALID_HANDLE_VALUE. To get extended error information, call
            GetLastError.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/setupapi/nf-setupapi-setupdigetclassdevsw
            </remarks>
        </member>
        <member name="M:WinApi.SetupApi.Api.SetupDiGetDeviceInterfaceDetailA(System.IntPtr,WinApi.SetupApi.SpDeviceInterfaceData@,WinApi.SetupApi.SpDeviceInterfaceDetailData@,System.UInt32,System.UInt32@,WinApi.SetupApi.SpDevInfoData@)">
            <summary>
            The SetupDiGetDeviceInterfaceDetail function returns details about a device interface.
            </summary>
            <param name="hDevInfo">
            A pointer to the device information set that contains the interface for which to
            retrieve details. This handle is typically returned by SetupDiGetClassDevs.
            </param>
            <param name="deviceInterfaceData">
            A pointer to an <see cref="T:WinApi.SetupApi.SpDeviceInterfaceData" /> structure that specifies the interface in
            DeviceInfoSet for which to retrieve details. A pointer of this type is typically
            returned by SetupDiEnumDeviceInterfaces.
            </param>
            <param name="deviceInterfaceDetailData">
            A pointer to an <see cref="T:WinApi.SetupApi.SpDeviceInterfaceDetailData" /> structure to receive information about
            the specified interface. This parameter is optional and can be NULL. This parameter must
            be NULL if DeviceInterfaceDetailSize is zero. If this parameter is specified, the caller
            must set DeviceInterfaceDetailData.cbSize to sizeof(<see cref="T:WinApi.SetupApi.SpDeviceInterfaceDetailData" />) before
            calling this function. The cbSize member always contains the size of the fixed part of the
            data structure, not a size reflecting the variable-length string at the end.
            </param>
            <param name="deviceInterfaceDetailDataSize">
            The size of the DeviceInterfaceDetailData buffer. The buffer must be at least 
            (offsetof(<see cref="T:WinApi.SetupApi.SpDeviceInterfaceDetailData" />, DevicePath) + sizeof(TCHAR)) bytes, to contain
            the fixed part of the structure and a single NULL to terminate an empty MULTI_SZ string.
            This parameter must be zero if <paramref name="deviceInterfaceDetailData"/> is NULL.
            </param>
            <param name="requiredSize">
            A pointer to a variable of type DWORD that receives the required size of the
            <paramref name="deviceInterfaceDetailData"/> buffer. This size includes the size of the fixed part of the structure
            plus the number of bytes required for the variable-length device path string. This parameter is
            optional and can be NULL.
            </param>
            <param name="deviceInfoData">
            A pointer to a buffer that receives information about the device that supports the requested
            interface. The caller must set <see cref="T:WinApi.SetupApi.SpDevInfoData"/>.cbSize to sizeof(<see cref="T:WinApi.SetupApi.SpDevInfoData"/>). This
            parameter is optional and can be NULL.
            </param>
            <returns>
            SetupDiGetDeviceInterfaceDetail returns TRUE if the function completed without error. If the
            function completed with an error, FALSE is returned and the error code for the failure
            can be retrieved by calling GetLastError.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/setupapi/nf-setupapi-setupdigetdeviceinterfacedetaila
            </remarks>
        </member>
        <member name="T:WinApi.SetupApi.DiGetClassFlags">
            <summary>
            A variable of type DWORD that specifies control options that filter the device
            information elements that are added to the device information set. This parameter
            can be a bitwise OR of zero or more of the following flags. For more information
            about combining these flags, see the following Remarks section.
            </summary>
            <remarks>
            https://www.pinvoke.net/default.aspx/setupapi.setupdigetclassdevs
            </remarks>
        </member>
        <member name="F:WinApi.SetupApi.DiGetClassFlags.DIGCF_DEFAULT">
            <summary>
            Return only the device that is associated with the system default device
            interface, if one is set, for the specified device interface classes.
            </summary>
        </member>
        <member name="F:WinApi.SetupApi.DiGetClassFlags.DIGCF_PRESENT">
            <summary>
            Return only devices that are currently present in a system.
            </summary>
        </member>
        <member name="F:WinApi.SetupApi.DiGetClassFlags.DIGCF_ALLCLASSES">
            <summary>
            Return a list of installed devices for all device setup classes or all device
            interface classes.
            </summary>
        </member>
        <member name="F:WinApi.SetupApi.DiGetClassFlags.DIGCF_PROFILE">
            <summary>
            Return only devices that are a part of the current hardware profile.
            </summary>
        </member>
        <member name="F:WinApi.SetupApi.DiGetClassFlags.DIGCF_DEVICEINTERFACE">
            <summary>
            Return devices that support device interfaces for the specified device
            interface classes. This flag must be set in the Flags parameter if the
            Enumerator parameter specifies a device instance ID.
            </summary>
        </member>
        <member name="T:WinApi.SetupApi.SpDeviceInterfaceData">
            <summary>
            An <see cref="T:WinApi.SetupApi.SpDeviceInterfaceData"/> structure defines a device interface in a device information set.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/setupapi/ns-setupapi-sp_device_interface_data
            </remarks>
        </member>
        <member name="F:WinApi.SetupApi.SpDeviceInterfaceData.cbSize">
            <summary>
            The size, in bytes, of the <see cref="T:WinApi.SetupApi.SpDeviceInterfaceData"/> structure. For more information, see the Remarks section.
            </summary>
        </member>
        <member name="F:WinApi.SetupApi.SpDeviceInterfaceData.InterfaceClassGuid">
            <summary>
            The GUID for the class to which the device interface belongs.
            </summary>
        </member>
        <member name="F:WinApi.SetupApi.SpDeviceInterfaceData.Flags">
            <summary>
            SPINT_ACTIVE, SPINT_DEFAULT, SPINT_REMOVED
            </summary>
        </member>
        <member name="F:WinApi.SetupApi.SpDeviceInterfaceData.Reserved">
            <summary>
            Reserved. Do not use.
            </summary>
        </member>
        <member name="T:WinApi.SetupApi.SpDeviceInterfaceDetailData">
            <summary>
            An SP_DEVICE_INTERFACE_DETAIL_DATA structure contains the path for a device interface.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/setupapi/ns-setupapi-sp_device_interface_detail_data_a
            </remarks>
        </member>
        <member name="F:WinApi.SetupApi.SpDeviceInterfaceDetailData.cbSize">
            <summary>
            The size, in bytes, of the SP_DEVICE_INTERFACE_DETAIL_DATA structure. For more information, see the following Remarks section.
            </summary>
        </member>
        <member name="F:WinApi.SetupApi.SpDeviceInterfaceDetailData.DevicePath">
            <summary>
            A NULL-terminated string that contains the device interface path. This path can be passed to Win32 functions such as CreateFile.
            </summary>
        </member>
        <member name="T:WinApi.SetupApi.SpDevInfoData">
            <summary>
            An SP_DEVINFO_DATA structure defines a device instance that is a member of a device information set.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/setupapi/ns-setupapi-sp_devinfo_data
            </remarks>
        </member>
        <member name="F:WinApi.SetupApi.SpDevInfoData.cbSize">
            <summary>
            The size, in bytes, of the SP_DEVINFO_DATA structure.
            </summary>
        </member>
        <member name="F:WinApi.SetupApi.SpDevInfoData.ClassGuid">
            <summary>
            The GUID of the device's setup class.
            </summary>
        </member>
        <member name="F:WinApi.SetupApi.SpDevInfoData.DevInst">
            <summary>
            An opaque handle to the device instance (also known as a handle to the devnode).
            Some functions, such as SetupDiXxx functions, take the whole SP_DEVINFO_DATA 
            structure as input to identify a device in a device information set. Other 
            functions, such as CM_Xxx functions like CM_Get_DevNode_Status, take this
            DevInst handle as input.
            </summary>
        </member>
        <member name="F:WinApi.SetupApi.SpDevInfoData.Reserved">
            <summary>
            Reserved. For internal use only.
            </summary>
        </member>
        <member name="T:WinApi.User32.Api">
            <summary>
            Function definitions for user32.dll.
            </summary>
        </member>
        <member name="M:WinApi.User32.Api.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Passes the hook information to the next hook procedure in the current
            hook chain. A hook procedure can call this function either before or after
            processing the hook information.
            </summary>
            <param name="hhk">
            This parameter is ignored.
            </param>
            <param name="nCode">
            The hook code passed to the current hook procedure. The next hook procedure
            uses this code to determine how to process the hook information.
            </param>
            <param name="wParam">
            The wParam value passed to the current hook procedure. The meaning of this
            parameter depends on the type of hook associated with the current hook chain.
            </param>
            <param name="lParam">
            The lParam value passed to the current hook procedure. The meaning of this
            parameter depends on the type of hook associated with the current hook chain.
            </param>
            <returns>
            This value is returned by the next hook procedure in the chain. The current
            hook procedure must also return this value. The meaning of the return value
            depends on the hook type. For more information, see the descriptions of the
            individual hook procedures.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-callnexthookex
            </remarks>
        </member>
        <member name="M:WinApi.User32.Api.DispatchMessage(WinApi.User32.WinUserMessage@)">
            <summary>
            Dispatches a message to a window procedure. It is typically used to
            dispatch a message retrieved by the GetMessage function.
            </summary>
            <param name="lpmsg">A pointer to a structure that contains the message.</param>
            <returns>The return value specifies the value returned by the window procedure.
            Although its meaning depends on the message being dispatched, the return value
            generally is ignored.</returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dispatchmessage
            </remarks>
        </member>
        <member name="M:WinApi.User32.Api.GetForegroundWindow">
            <summary>
            Retrieves a handle to the foreground window (the window with which
            the user is currently working). The system assigns a slightly higher
            priority to the thread that creates the foreground window than it
            does to other threads.
            </summary>
            <returns>
            The return value is a handle to the foreground window. The foreground
            window can be NULL in certain circumstances, such as when a
            window is losing activation.
            </returns>
        </member>
        <member name="M:WinApi.User32.Api.GetMessage(WinApi.User32.WinUserMessage@,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Retrieves a message from the calling thread's message queue. The function dispatches
            incoming sent messages until a posted message is available for retrieval.
            Unlike GetMessage, the PeekMessage function does not wait for a message to be posted before returning.
            </summary>
            <param name="lpMsg">A pointer to an MSG structure that receives message information from the thread's message queue.</param>
            <param name="hWnd">
            A handle to the window whose messages are to be retrieved. The window must belong to the current thread.
            If hWnd is NULL, GetMessage retrieves messages for any window that belongs to the current thread, and
            any messages on the current thread's message queue whose hwnd value is NULL (see the MSG structure).
            Therefore if hWnd is NULL, both window messages and thread messages are processed. If hWnd is -1,
            GetMessage retrieves only messages on the current thread's message queue whose hwnd value is NULL,
            that is, thread messages as posted by PostMessage (when the hWnd parameter is NULL) or PostThreadMessage.
            </param>
            <param name="wMsgFilterMin">
            The integer value of the lowest message value to be retrieved. Use WM_KEYFIRST (0x0100) to specify the
            first keyboard message or WM_MOUSEFIRST (0x0200) to specify the first mouse message.
            Use WM_INPUT here and in wMsgFilterMax to specify only the WM_INPUT messages.
            If wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all
            available messages(that is, no range filtering is performed).
            </param>
            <param name="wMsgFilterMax">
            The integer value of the highest message value to be retrieved. Use WM_KEYLAST to specify the
            last keyboard message or WM_MOUSELAST to specify the last mouse message.
            Use WM_INPUT here and in wMsgFilterMin to specify only the WM_INPUT messages.
            If wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all
            available messages(that is, no range filtering is performed).</param>
            <returns>
            If the function retrieves a message other than WM_QUIT, the return value is nonzero.
            If the function retrieves the WM_QUIT message, the return value is zero.
            If there is an error, the return value is -1. For example, the function
            fails if hWnd is an invalid window handle or lpMsg is an invalid pointer.
            To get extended error information, call GetLastError.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessage
            </remarks>
        </member>
        <member name="M:WinApi.User32.Api.GetRawInputBuffer(System.IntPtr,System.UInt32@,System.Int32)">
            <summary>
            Performs a buffered read of the raw input data.
            </summary>
            <param name="pData">A pointer to a buffer of RAWINPUT structures that contain the raw
            input data. If NULL, the minimum required buffer, in bytes, is returned in *pcbSize.</param>
            <param name="size">The size, in bytes, of a RAWINPUT structure.</param>
            <param name="sizeHeader">The size, in bytes, of the RAWINPUTHEADER structure.</param>
            <returns>If pData is NULL and the function is successful, the return value is zero.
            If pData is not NULL and the function is successful, the return value is the number of
            RAWINPUT structures written to pData.
            If an error occurs, the return value is (UINT)-1. Call GetLastError for the error code.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputbuffer
            </remarks>
        </member>
        <member name="M:WinApi.User32.Api.GetRawInputData(System.IntPtr,WinApi.User32.RawInputCommand,System.IntPtr,System.UInt32@,System.Int32)">
            <summary>
            Retrieves the raw input from the specified device.
            </summary>
            <param name="hRawInput">A handle to the RAWINPUT structure. This comes from the lParam in WM_INPUT.</param>
            <param name="command">The command flag. This parameter can be RID_HEADER, RID_INPUT.</param>
            <param name="pData">A pointer to the data that comes from the RAWINPUT structure. This depends on
            the value of uiCommand. If pData is NULL, the required size of the buffer is returned in *pcbSize.</param>
            <param name="size">The size, in bytes, of the data in pData.</param>
            <param name="sizeHeader">The size, in bytes, of the RAWINPUTHEADER structure.</param>
            <returns>If pData is NULL and the function is successful, the return value is 0. If pData is not
            NULL and the function is successful, the return value is the number of bytes copied into pData.
            If there is an error, the return value is (UINT)-1.</returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdata
            </remarks>
        </member>
        <member name="M:WinApi.User32.Api.GetRawInputDeviceInfo(System.IntPtr,WinApi.User32.GetRawInputDeviceInfoCommand,WinApi.User32.RidDeviceInfo@,System.UInt32@)">
            <summary>
            Retrieves information about the raw input device.
            </summary>
            <param name="deviceHandle">A handle to the raw input device. This comes from the hDevice member of
            RAWINPUTHEADER or from GetRawInputDeviceList.</param>
            <param name="command">Specifies what data will be returned in pData: RIDI_DEVICENAME,
            RIDI_DEVICEINFO, RIDI_PREPARSEDDATA.</param>
            <param name="data">
            A pointer to a buffer that contains the information specified by uiCommand. If uiCommand is
            RIDI_DEVICEINFO, set the cbSize member of RID_DEVICE_INFO to sizeof(RID_DEVICE_INFO) before
            calling GetRawInputDeviceInfo.
            </param>
            <param name="dataSize">The size, in bytes, of the data in pData.</param>
            <returns>
            If successful, this function returns a non-negative number indicating the number of bytes
            copied to pData.
            If pData is not large enough for the data, the function returns -1. If pData is NULL, the
            function returns a value of zero.In both of these cases, pcbSize is set to the minimum size
            required for the pData buffer.
            Call GetLastError to identify any other errors.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdeviceinfoa
            </remarks>
        </member>
        <member name="M:WinApi.User32.Api.GetRawInputDeviceInfo(System.IntPtr,WinApi.User32.GetRawInputDeviceInfoCommand,System.IntPtr,System.UInt32@)">
            <summary>
            Retrieves information about the raw input device.
            </summary>
            <param name="deviceHandle">A handle to the raw input device. This comes from the hDevice member of
            RAWINPUTHEADER or from GetRawInputDeviceList.</param>
            <param name="command">Specifies what data will be returned in pData: RIDI_DEVICENAME,
            RIDI_DEVICEINFO, RIDI_PREPARSEDDATA.</param>
            <param name="pdata">
            A pointer to a buffer that contains the information specified by uiCommand. If uiCommand is
            RIDI_DEVICEINFO, set the cbSize member of RID_DEVICE_INFO to sizeof(RID_DEVICE_INFO) before
            calling GetRawInputDeviceInfo.
            </param>
            <param name="dataSize">The size, in bytes, of the data in pData.</param>
            <returns>
            If successful, this function returns a non-negative number indicating the number of bytes
            copied to pData.
            If pData is not large enough for the data, the function returns -1. If pData is NULL, the
            function returns a value of zero.In both of these cases, pcbSize is set to the minimum size
            required for the pData buffer.
            Call GetLastError to identify any other errors.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdeviceinfoa
            </remarks>
        </member>
        <member name="M:WinApi.User32.Api.GetRawInputDeviceList(WinApi.User32.RawInputDeviceList[],System.UInt32@,System.UInt32)">
            <summary>
            Enumerates the raw input devices attached to the system.
            </summary>
            <param name="RawInputDeviceList">
            An array of RAWINPUTDEVICELIST structures for the devices attached to the system.
            If NULL, the number of devices are returned in *puiNumDevices.
            </param>
            <param name="NumDevices">
            If pRawInputDeviceList is NULL, the function populates this variable with the number
            of devices attached to the system; otherwise, this variable specifies the number of
            RAWINPUTDEVICELIST structures that can be contained in the buffer to which 
            pRawInputDeviceList points. If this value is less than the number of devices attached
            to the system, the function returns the actual number of devices in this variable and
            fails with ERROR_INSUFFICIENT_BUFFER.
            </param>
            <param name="cbSize">The size of a RAWINPUTDEVICELIST structure, in bytes.</param>
            <returns>
            If the function is successful, the return value is the number of devices stored
            in the buffer pointed to by pRawInputDeviceList.
            On any other error, the function returns(UINT) -1 and GetLastError returns the
            error indication.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdevicelist
            </remarks>
        </member>
        <member name="M:WinApi.User32.Api.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            Copies the text of the specified window's title bar (if it has one)
            into a buffer. If the specified window is a control, the text of the
            control is copied. However, GetWindowText cannot retrieve the text
            of a control in another application.
            </summary>
            <param name="hWnd">
            A handle to the window or control containing the text.
            </param>
            <param name="text">
            The buffer that will receive the text. If the string is as long or
            longer than the buffer, the string is truncated and terminated with a
            null character.
            </param>
            <param name="count">
            The maximum number of characters to copy to the buffer, including the
            null character. If the text exceeds this limit, it is truncated.
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is the length, in characters, of the
            copied string, not including the terminating null character. If the window has
            no title bar or text, if the title bar is empty, or if the window or control handle
            is invalid, the return value is zero. To get extended error information,
            call GetLastError.
            </para>
            <para>This function cannot retrieve the text of an edit control in another application.
            </para></returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowtextw
            </remarks>
        </member>
        <member name="M:WinApi.User32.Api.KillTimer(System.IntPtr,System.IntPtr)">
            <summary>
            Destroys the specified timer.
            </summary>
            <param name="hWnd">
            A handle to the window associated with the specified timer. This value must be
            the same as the hWnd value passed to the SetTimer function that created the timer.
            </param>
            <param name="uIDEvent">
            The timer to be destroyed. If the window handle passed to SetTimer is valid,
            this parameter must be the same as the nIDEvent
            value passed to SetTimer.If the application calls SetTimer with hWnd set to
            NULL, this parameter must be the timer identifier returned by SetTimer.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.To get extended error information, call GetLastError.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-killtimer
            </remarks>
        </member>
        <member name="M:WinApi.User32.Api.RegisterRawInputDevices(WinApi.User32.RawInputDevice[],System.UInt32,System.UInt32)">
            <summary>
            Registers the devices that supply the raw input data.
            </summary>
            <param name="pRawInputDevice">An array of RAWINPUTDEVICE structures that represent the devices that supply the raw input.</param>
            <param name="uiNumDevices">The number of RAWINPUTDEVICE structures pointed to by pRawInputDevices.</param>
            <param name="cbSize">The size, in bytes, of a RAWINPUTDEVICE structure.</param>
            <returns>TRUE if the function succeeds; otherwise, FALSE. If the function fails, call GetLastError for more information.</returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerrawinputdevices
            </remarks>
        </member>
        <member name="M:WinApi.User32.Api.SetTimer(System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr)">
            <summary>
            Creates a timer with the specified time-out value.
            </summary>
            <param name="hWnd">
            A handle to the window to be associated with the timer. This window must be
            owned by the calling thread. If a NULL value for hWnd is passed in along with
            an nIDEvent of an existing timer, that timer will be replaced in the same way
            that an existing non-NULL hWnd timer will be.
            </param>
            <param name="nIDEvent">
            A nonzero timer identifier. If the hWnd parameter is NULL, and the nIDEvent does
            not match an existing timer then it is ignored and a new timer ID is generated.
            If the hWnd parameter is not NULL and the window specified by hWnd already has a
            timer with the value nIDEvent, then the existing timer is replaced by the new
            timer. When SetTimer replaces a timer, the timer is reset. Therefore, a message
            will be sent after the current time-out value elapses, but the previously set time-out
            value is ignored. If the call is not intended to replace an existing timer, nIDEvent
            should be 0 if the hWnd is NULL.
            </param>
            <param name="uElapse">
            <para>
            The time-out value, in milliseconds.
            </para>
            <para>If uElapse is less than USER_TIMER_MINIMUM(0x0000000A), the timeout is set to
            USER_TIMER_MINIMUM.If uElapse is greater than USER_TIMER_MAXIMUM(0x7FFFFFFF),
            the timeout is set to USER_TIMER_MAXIMUM.
            </para></param>
            <param name="lpTimerFunc">
            A pointer to the function to be notified when the time-out value elapses. For more
            information about the function, see TimerProc. If lpTimerFunc is NULL, the system
            posts a WM_TIMER message to the application queue. The hwnd member of the message's
            MSG structure contains the value of the hWnd parameter.
            </param>
            <returns><para>If the function succeeds and the hWnd parameter is NULL, the return
            value is an integer identifying the new timer. An application can pass this value to
            the KillTimer function to destroy the timer.
            </para>
            <para>If the function succeeds and
            the hWnd parameter is not NULL, then the return value is a nonzero integer. An
            application can pass the value of the nIDEvent parameter to the KillTimer function
            to destroy the timer.
            </para>
            <para>If the function fails to create a timer, the
            return value is zero. To get extended error information, call GetLastError.
            </para></returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-settimer
            </remarks>
        </member>
        <member name="M:WinApi.User32.Api.SetWindowsHookEx(WinApi.User32.SetWindowsHookExType,System.Delegate,System.IntPtr,System.UInt32)">
            <summary>
            Installs an application-defined hook procedure into a hook chain. You would install a
            hook procedure to monitor the system for certain types of events. These events are
            associated either with a specific thread or with all threads in the same desktop as
            the calling thread.
            </summary>
            <param name="hookType">The type of hook procedure to be installed.</param>
            <param name="lpfn">
            A pointer to the hook procedure. If the dwThreadId parameter is zero or specifies the
            identifier of a thread created by a different process, the lpfn parameter must point
            to a hook procedure in a DLL. Otherwise, lpfn can point to a hook procedure in the
            code associated with the current process.</param>
            <param name="hMod">
            A handle to the DLL containing the hook procedure pointed to by the lpfn parameter. The
            hMod parameter must be set to NULL if the dwThreadId parameter specifies a thread
            created by the current process and if the hook procedure is within the code associated
            with the current process.</param>
            <param name="dwThreadId">
            The identifier of the thread with which the hook procedure is to be associated. For
            desktop apps, if this parameter is zero, the hook procedure is associated with all
            existing threads running in the same desktop as the calling thread. For Windows Store
            apps, see the Remarks section.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the handle to the hook procedure.
            </para>
            <para>If the function fails, the return value is NULL.To get extended error
            information, call GetLastError.
            </para></returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa
            </remarks>
        </member>
        <member name="M:WinApi.User32.Api.TranslateMessage(WinApi.User32.WinUserMessage@)">
            <summary>
            Translates virtual-key messages into character messages. The character messages are posted to the calling thread's message
            queue, to be read the next time the thread calls the GetMessage or PeekMessage function.
            </summary>
            <param name="lpMsg">
            A pointer to an MSG structure that contains message information retrieved from the calling thread's
            message queue by using the GetMessage or PeekMessage function.
            </param>
            <returns>
            If the message is translated (that is, a character message is posted to the thread's message
            queue), the return value is nonzero.
            If the message is WM_KEYDOWN, WM_KEYUP, WM_SYSKEYDOWN, or WM_SYSKEYUP, the return value is
            nonzero, regardless of the translation.
            If the message is not translated (that is, a character message is not posted to the
            thread's message queue), the return value is zero.
            </returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-translatemessage
            </remarks>
        </member>
        <member name="M:WinApi.User32.Api.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
            Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function.
            </summary>
            <param name="hhk">
            A handle to the hook to be removed. This parameter is a hook handle
            obtained by a previous call to SetWindowsHookEx.
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is nonzero.
            </para>
            <para>If the function fails, the return value is zero. To get extended
            error information, call GetLastError.
            </para></returns>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unhookwindowshookex
            </remarks>
        </member>
        <member name="T:WinApi.User32.GetRawInputDeviceInfoCommand">
            <summary>
            Command flag for <see cref="M:WinApi.User32.Api.GetRawInputDeviceInfo(System.IntPtr,WinApi.User32.GetRawInputDeviceInfoCommand,System.IntPtr,System.UInt32@)"/>.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdeviceinfoa
            </remarks>
        </member>
        <member name="F:WinApi.User32.GetRawInputDeviceInfoCommand.RIDI_DEVICENAME">
            <summary>
            pData points to a string that contains the device name.
            
            For this uiCommand only, the value in pcbSize is the character count (not the byte count).
            </summary>
        </member>
        <member name="F:WinApi.User32.GetRawInputDeviceInfoCommand.RIDI_DEVICEINFO">
            <summary>
            pData points to an <see cref="T:WinApi.User32.RidDeviceInfo"/> structure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.GetRawInputDeviceInfoCommand.RIDI_PREPARSEDDATA">
            <summary>
            pData points to the previously parsed data. 
            </summary>
        </member>
        <member name="T:WinApi.User32.KeyboardLowLevelHookStruct">
            <summary>
            The KBDLLHOOKSTRUCT structure contains information about a low-level keyboard input event.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-kbdllhookstruct
            http://www.pinvoke.net/default.aspx/Structures/KBDLLHOOKSTRUCT.html
            </remarks>
        </member>
        <member name="F:WinApi.User32.KeyboardLowLevelHookStruct.vkCode">
            <summary>
            A virtual-key code. The code must be a value in the range 1 to 254.
            </summary>
        </member>
        <member name="F:WinApi.User32.KeyboardLowLevelHookStruct.scanCode">
            <summary>
            A hardware scan code for the key.
            </summary>
        </member>
        <member name="F:WinApi.User32.KeyboardLowLevelHookStruct.flags">
            <summary>
            The extended-key flag, event-injected flags, context code, and transition-state
            flag. This member is specified as follows. An application can use the following
            values to test the keystroke flags. Testing <see cref="F:WinApi.User32.KeyboardLowLevelHookStructFlags.LLKHF_INJECTED"/> (bit 4) will tell you
            whether the event was injected. If it was, then testing <see cref="F:WinApi.User32.KeyboardLowLevelHookStructFlags.LLKHF_LOWER_IL_INJECTED"/>
            (bit 1) will tell you whether or not the event was injected from a process
            running at lower integrity level.
            </summary>
        </member>
        <member name="F:WinApi.User32.KeyboardLowLevelHookStruct.time">
            <summary>
            The time stamp for this message, equivalent to what GetMessageTime would return for this message.
            </summary>
        </member>
        <member name="F:WinApi.User32.KeyboardLowLevelHookStruct.dwExtraInfo">
            <summary>
            Additional information associated with the message.
            </summary>
        </member>
        <member name="T:WinApi.User32.KeyboardLowLevelHookStructFlags">
            <summary>
            Flags used by <see cref="T:WinApi.User32.KeyboardLowLevelHookStruct"/>.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-kbdllhookstruct
            </remarks>
        </member>
        <member name="F:WinApi.User32.KeyboardLowLevelHookStructFlags.LLKHF_EXTENDED">
            <summary>
            Test the extended-key flag. 
            </summary>
        </member>
        <member name="F:WinApi.User32.KeyboardLowLevelHookStructFlags.LLKHF_LOWER_IL_INJECTED">
            <summary>
            Test the event-injected (from a process running at lower integrity level) flag. 
            </summary>
        </member>
        <member name="F:WinApi.User32.KeyboardLowLevelHookStructFlags.LLKHF_INJECTED">
            <summary>
            Test the event-injected (from any process) flag. 
            </summary>
        </member>
        <member name="F:WinApi.User32.KeyboardLowLevelHookStructFlags.LLKHF_ALTDOWN">
            <summary>
            Test the context code. 
            </summary>
        </member>
        <member name="F:WinApi.User32.KeyboardLowLevelHookStructFlags.LLKHF_UP">
            <summary>
            Test the transition-state flag. 
            </summary>
        </member>
        <member name="T:WinApi.User32.Managed">
            <summary>
            Managed wrapper for user32 calls. Handles pointers, memory allocation, and return results.
            </summary>
        </member>
        <member name="M:WinApi.User32.Managed.GetAllRawDevices">
            <summary>
            A convenient function for getting all raw input devices.
            This method will get all devices, including virtual devices
            For remote desktop and any other device driver that's registered
            as such a device.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinApi.User32.Managed.GetRawInputData(System.IntPtr)">
            <summary>
            Calls User32.GetRawInputData. Accepts lParam from WndProc and retrieves the RawInput information.
            </summary>
            <param name="lParam">Pointer.</param>
            <returns>RawInput.</returns>
        </member>
        <member name="M:WinApi.User32.Managed.GetRawInputDeviceName(System.IntPtr)">
            <summary>
            Calls User32.GetRawInputDeviceInfo.
            </summary>
            <param name="inputDevice">Pointer from RawInput header to device.</param>
            <returns>Windows device name.</returns>
        </member>
        <member name="M:WinApi.User32.Managed.HidpGetCapabilities(System.IntPtr)">
            <summary>
            Calls Hid.HidP_GetCaps. Gets HID capabilities.
            </summary>
            <param name="preparsedData">Pointer to preparsed data structure.</param>
            <returns>HID capabilities.</returns>
        </member>
        <member name="M:WinApi.User32.Managed.HidpGetButtonCapabilities(WinApi.Hid.HidpCaps,System.IntPtr)">
            <summary>
            Calls Hid.HidP_GetButtonCaps. Gets HID button capabilities.
            </summary>
            <param name="hidpcaps">HID capabilities.</param>
            <param name="preparsedData">Pointer to preparsed data structure.</param>
            <returns>HID button capabilities.</returns>
        </member>
        <member name="M:WinApi.User32.Managed.HidpGetValueCapabilities(WinApi.Hid.HidpCaps,System.IntPtr)">
            <summary>
            Calls Hid.HidP_GetValueCaps. Gets HID button capabilities.
            </summary>
            <param name="hidpcaps">HID capabilities.</param>
            <param name="preparsedData">Pointer to preparsed data structure.</param>
            <returns>HID button capabilities.</returns>
        </member>
        <member name="T:WinApi.User32.MouseLowLevelHookStruct">
            <summary>
            Contains information about a low-level mouse input event.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-msllhookstruct
            http://www.pinvoke.net/default.aspx/Structures.MSLLHOOKSTRUCT
            </remarks>
        </member>
        <member name="F:WinApi.User32.MouseLowLevelHookStruct.pt">
            <summary>
            The x- and y-coordinates of the cursor, in per-monitor-aware screen coordinates.
            </summary>
        </member>
        <member name="F:WinApi.User32.MouseLowLevelHookStruct.mouseData">
            <summary>
            <para>If the message is WM_MOUSEWHEEL, the high-order word of this member is the wheel delta. The
            low-order word is reserved. A positive value indicates that the wheel was rotated forward,
            away from the user; a negative value indicates that the wheel was rotated backward, toward
            the user. One wheel click is defined as WHEEL_DELTA, which is 120.
            </para>
            <para>If the message is WM_XBUTTONDOWN, WM_XBUTTONUP, WM_XBUTTONDBLCLK, WM_NCXBUTTONDOWN,
            WM_NCXBUTTONUP, or WM_NCXBUTTONDBLCLK, the high-order word specifies which X button
            was pressed or released, and the low-order word is reserved.This value can be one or
            more of the following values.Otherwise, mouseData is not used.
            </para>
            </summary>
            <remarks>
            this must be ints, not uints
            </remarks>
        </member>
        <member name="F:WinApi.User32.MouseLowLevelHookStruct.flags">
            <summary>
            The event-injected flags. An application can use the following values to test the
            flags. Testing LLMHF_INJECTED (bit 0) will tell you whether the event was injected.
            If it was, then testing LLMHF_LOWER_IL_INJECTED (bit 1) will tell you whether or
            not the event was injected from a process running at lower integrity level.
            </summary>
        </member>
        <member name="F:WinApi.User32.MouseLowLevelHookStruct.time">
            <summary>
            The time stamp for this message.
            </summary>
        </member>
        <member name="F:WinApi.User32.MouseLowLevelHookStruct.dwExtraInfo">
            <summary>
            Additional information associated with the message.
            </summary>
        </member>
        <member name="T:WinApi.User32.RawHid">
            <summary>
            Describes the format of the raw input from a Human Interface Device (HID).
            One possible union for property <see cref="F:WinApi.User32.RawInput.Data"/>.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawhid
            </remarks>
        </member>
        <member name="F:WinApi.User32.RawHid.dwSizeHid">
            <summary>
            The size, in bytes, of each HID input in bRawData.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawHid.dwCount">
            <summary>
            The number of HID inputs in bRawData.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawHid.bRawData">
            <summary>
            The raw input data, as an array of bytes.
            </summary>
        </member>
        <member name="T:WinApi.User32.RawInput">
            <summary>
            Contains the raw input from a device.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawinput
            </remarks>
        </member>
        <member name="F:WinApi.User32.RawInput.Header">
            <summary>
            Header info.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInput.Data">
            <summary>
            Input data.
            </summary>
        </member>
        <member name="T:WinApi.User32.RawInputCommand">
            <summary>
            Enumeration contanining the command types to issue.
            Flag used by <see cref="M:WinApi.User32.Api.GetRawInputData(System.IntPtr,WinApi.User32.RawInputCommand,System.IntPtr,System.UInt32@,System.Int32)"/>.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdata
            http://www.pinvoke.net/default.aspx/Enums/RawInputCommand.html
            </remarks>
        </member>
        <member name="F:WinApi.User32.RawInputCommand.Input">
            <summary>
            Get input data.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputCommand.Header">
            <summary>
            Get header data.
            </summary>
        </member>
        <member name="T:WinApi.User32.RawInputData">
            <summary>
            Union struct for <see cref="T:WinApi.User32.RawInput"/>. Contains data for the object.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawinput
            
            I was having some kind of issue marsharlling this with the overlapping
            field offsets, so I made this non-union.
            </remarks>
        </member>
        <member name="F:WinApi.User32.RawInputData.Keyboard">
            <summary>
            If the data comes from a keyboard, this is the raw input data.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputData.Mouse">
            <summary>
            If the data comes from a mouse, this is the raw input data.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputData.Hid">
            <summary>
             If the data comes from an HID, this is the raw input data.
            </summary>
        </member>
        <member name="T:WinApi.User32.RawInputDevice">
            <summary>
            Defines information for the raw input devices.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawinputdevice
            </remarks>
        </member>
        <member name="F:WinApi.User32.RawInputDevice.UsagePage">
            <summary>
            Top level collection Usage page for the raw input device.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputDevice.Usage">
            <summary>
            Top level collection Usage for the raw input device.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputDevice.Flags">
            <summary>
            Mode flag that specifies how to interpret the information provided by UsagePage and Usage.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputDevice.WindowHandle">
            <summary>
            Handle to the target device. If NULL, it follows the keyboard focus.
            This is different from the handle obtained by calling
            <see cref="M:WinApi.Kernel32.Api.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="T:WinApi.User32.RawInputDeviceFlags">
            <summary>
            Enumeration containing flags for a <see cref="T:WinApi.User32.RawInputDevice"/>.
            </summary>
            <remarks>
            http://pinvoke.net/default.aspx/Enums/RawInputDeviceFlags.html
            </remarks>
        </member>
        <member name="F:WinApi.User32.RawInputDeviceFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputDeviceFlags.Remove">
            <summary>
            If set, this removes the top level collection from the inclusion list.
            This tells the operating system to stop reading from a device which
            matches the top level collection.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputDeviceFlags.Exclude">
            <summary>
            If set, this specifies the top level collections to exclude when reading
            a complete usage page. This flag only affects a TLC whose usage page is
            already specified with PageOnly.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputDeviceFlags.PageOnly">
            <summary>
            If set, this specifies all devices whose top level collection is from
            the specified usUsagePage. Note that Usage must be zero. To exclude a
            particular top level collection, use Exclude.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputDeviceFlags.NoLegacy">
            <summary>
            If set, this prevents any devices specified by UsagePage or Usage from
            generating legacy messages. This is only for the mouse and keyboard.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputDeviceFlags.InputSink">
            <summary>
            If set, this enables the caller to receive the input even when the caller
            is not in the foreground. Note that WindowHandle must be specified.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputDeviceFlags.CaptureMouse">
            <summary>
            If set, the mouse button click does not activate the other window.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputDeviceFlags.NoHotKeys">
            <summary>
            If set, the application-defined keyboard device hotkeys are not handled.
            However, the system hotkeys; for example, ALT+TAB and CTRL+ALT+DEL, are
            still handled. By default, all keyboard hotkeys are handled. NoHotKeys
            can be specified even if NoLegacy is not specified and WindowHandle is NULL.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputDeviceFlags.AppKeys">
            <summary>
            If set, application keys are handled.  NoLegacy must be
            specified.  Keyboard only.
            </summary>
        </member>
        <member name="T:WinApi.User32.RawInputDeviceList">
            <summary>
            Contains information about a raw input device.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawinputdevicelist
            </remarks>
        </member>
        <member name="F:WinApi.User32.RawInputDeviceList.hDevice">
            <summary>
            A handle to the device generating the raw input data.
            This is different from the handle obtained by
            calling <see cref="M:WinApi.Kernel32.Api.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputDeviceList.Type">
            <summary>
            The type of device.
            </summary>
        </member>
        <member name="T:WinApi.User32.RawInputDeviceType">
            <summary>
            Type flag for <see cref="T:WinApi.User32.RidDeviceInfo"/>.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rid_device_info
            </remarks>
        </member>
        <member name="F:WinApi.User32.RawInputDeviceType.Mouse">
            <summary>
            Data comes from a mouse. 
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputDeviceType.Keyboard">
            <summary>
            Data comes from a keyboard. 
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputDeviceType.Hid">
            <summary>
            Data comes from an HID that is not a keyboard or a mouse. 
            </summary>
        </member>
        <member name="T:WinApi.User32.RawInputHeader">
            <summary>
            Contains the header information that is part of the raw input data.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawinputheader
            </remarks>
        </member>
        <member name="F:WinApi.User32.RawInputHeader.dwType">
            <summary>
            The type of raw input.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputHeader.dwSize">
            <summary>
            The size, in bytes, of the entire input packet of data. This includes
            <see cref="T:WinApi.User32.RawInput"/> plus possible extra input reports in
            the <see cref="T:WinApi.User32.RawHid"/> variable length array.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputHeader.hDevice">
            <summary>
            A handle to the device generating the raw input data.
            This is different from the handle obtained by calling <see cref="M:WinApi.Kernel32.Api.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawInputHeader.wParam">
            <summary>
            The value passed in the wParam parameter of the WM_INPUT message.
            RIM_INPUT 0 if input occurred while application was in the foreground else RIM_INPUTSINK 1 if it was not.
            </summary>
        </member>
        <member name="T:WinApi.User32.RawKeyboard">
            <summary>
            Contains information about the state of the keyboard.
            One possible union for property <see cref="F:WinApi.User32.RawInput.Data"/>.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawkeyboard
            </remarks>
        </member>
        <member name="F:WinApi.User32.RawKeyboard.Makecode">
            <summary>
            The scan code from the key depression.
            The scan code for keyboard overrun is KEYBOARD_OVERRUN_MAKE_CODE.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawKeyboard.Flags">
            <summary>
            One or more of RI_KEY_MAKE, RI_KEY_BREAK, RI_KEY_E0, RI_KEY_E1
            </summary>
        </member>
        <member name="F:WinApi.User32.RawKeyboard.Reserved">
            <summary>
            Reserved; must be zero.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawKeyboard.VKey">
            <summary>
            Windows message compatible virtual-key code. For more information, see Virtual Key Codes.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawKeyboard.Message">
            <summary>
            The corresponding window message, for example WM_KEYDOWN, WM_SYSKEYDOWN, and so forth.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawKeyboard.ExtraInformation">
            <summary>
            The device-specific additional information for the event.
            </summary>
        </member>
        <member name="T:WinApi.User32.RawMouse">
            <summary>
            Contains information about the state of the mouse.
            One possible union for property <see cref="F:WinApi.User32.RawInput.Data"/>.
            </summary>
            <remarks>
            http://www.pinvoke.net/default.aspx/Structures/RAWINPUTMOUSE.html
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawmouse
            </remarks>
        </member>
        <member name="F:WinApi.User32.RawMouse.Flags">
            <summary>
            The mouse state.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouse.Data.ButtonData">
            <summary>
            If the mouse wheel is moved, this will contain the delta amount.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouse.Data.ButtonFlags">
            <summary>
            Flags for the event.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouse.RawMouseData">
            <summary>
            Mouse data.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouse.RawButtons">
            <summary>
            Raw button data.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouse.LastX">
            <summary>
            The motion in the X direction. This is signed relative motion or
            absolute motion, depending on the value of usFlags.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouse.LastY">
            <summary>
            The motion in the Y direction. This is signed relative motion or absolute motion,
            depending on the value of usFlags.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouse.ExtraInformation">
            <summary>
            The device-specific additional information for the event.
            </summary>
        </member>
        <member name="T:WinApi.User32.RawMouseButtons">
            <summary>
            Enumeration containing the button data for raw mouse input.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawmouse
            </remarks>
        </member>
        <member name="F:WinApi.User32.RawMouseButtons.None">
            <summary>
            No button.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouseButtons.LeftDown">
            <summary>
            Left (button 1) down.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouseButtons.LeftUp">
            <summary>
            Left (button 1) up.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouseButtons.RightDown">
            <summary>
            Right (button 2) down.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouseButtons.RightUp">
            <summary>
            Right (button 2) up.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouseButtons.MiddleDown">
            <summary>
            Middle (button 3) down.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouseButtons.MiddleUp">
            <summary>
            Middle (button 3) up.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouseButtons.Button4Down">
            <summary>
            Button 4 down.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouseButtons.Button4Up">
            <summary>
            Button 4 up.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouseButtons.Button5Down">
            <summary>
            Button 5 down.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouseButtons.Button5Up">
            <summary>
            Button 5 up.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouseButtons.MouseWheel">
            <summary>
            Mouse wheel moved.
            </summary>
        </member>
        <member name="T:WinApi.User32.RawMouseFlags">
            <summary>
            Enumeration containing the flags for raw mouse data.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawmouse
            </remarks>
        </member>
        <member name="F:WinApi.User32.RawMouseFlags.MoveRelative">
            <summary>
            Relative to the last position.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouseFlags.MoveAbsolute">
            <summary>
            Absolute positioning.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouseFlags.VirtualDesktop">
            <summary>
            Coordinate data is mapped to a virtual desktop.
            </summary>
        </member>
        <member name="F:WinApi.User32.RawMouseFlags.AttributesChanged">
            <summary>
            Attributes for the mouse have changed.
            </summary>
        </member>
        <member name="T:WinApi.User32.RidDeviceInfo">
            <summary>
            Defines the raw input data coming from any device.
            </summary>
            <remarks>
            https://www.pinvoke.net/default.aspx/user32/GetRawInputDeviceInfo%20.html
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rid_device_info
            </remarks>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfo.Size">
            <summary>
            The size, in bytes, of the <see cref="T:WinApi.User32.RidDeviceInfo"/> structure.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfo.Type">
            <summary>
            The type of raw input data.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfo.MouseInfo">
            <summary>
            If <see cref="F:WinApi.User32.RidDeviceInfo.Type"/> is <see cref="F:WinApi.User32.RawInputDeviceType.Mouse"/>, 
            this is the <see cref="T:WinApi.User32.RidDeviceInfoMouse"/> structure that defines the mouse.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfo.KeyboardInfo">
            <summary>
            If <see cref="F:WinApi.User32.RidDeviceInfo.Type"/> is <see cref="F:WinApi.User32.RawInputDeviceType.Keyboard"/>, 
            this is the <see cref="T:WinApi.User32.RidDeviceInfoKeyboard"/> structure that defines the keyboard.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfo.HidInfo">
            <summary>
            If <see cref="F:WinApi.User32.RidDeviceInfo.Type"/> is <see cref="F:WinApi.User32.RawInputDeviceType.Hid"/>, 
            this is the <see cref="T:WinApi.User32.RidDeviceInfoHid"/> structure that defines the HID device.
            </summary>
        </member>
        <member name="T:WinApi.User32.RidDeviceInfoHid">
            <summary>
            Defines the raw input data coming from the specified Human Interface Device (HID).
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rid_device_info_hid
            https://www.pinvoke.net/default.aspx/user32/GetRawInputDeviceInfo%20.html
            </remarks>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoHid.VendorID">
            <summary>
            The vendor identifier for the HID.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoHid.ProductID">
            <summary>
            The product identifier for the HID.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoHid.VersionNumber">
            <summary>
            The version number for the HID.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoHid.UsagePage">
            <summary>
            The top-level collection Usage Page for the device.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoHid.Usage">
            <summary>
            The top-level collection Usage for the device.
            </summary>
        </member>
        <member name="T:WinApi.User32.RidDeviceInfoKeyboard">
            <summary>
            Defines the raw input data coming from the specified keyboard.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rid_device_info_keyboard
            https://www.pinvoke.net/default.aspx/user32/GetRawInputDeviceInfo%20.html
            </remarks>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoKeyboard.Type">
            <summary>
            The type of the keyboard.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoKeyboard.SubType">
            <summary>
            The subtype of the keyboard.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoKeyboard.KeyboardMode">
            <summary>
            The scan code mode.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoKeyboard.NumberOfFunctionKeys">
            <summary>
            The number of function keys on the keyboard.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoKeyboard.NumberOfIndicators">
            <summary>
            The number of LED indicators on the keyboard.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoKeyboard.NumberOfKeysTotal">
            <summary>
            The total number of keys on the keyboard.
            </summary>
        </member>
        <member name="T:WinApi.User32.RidDeviceInfoMouse">
            <summary>
            Defines the raw input data coming from the specified mouse.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rid_device_info_mouse
            https://www.pinvoke.net/default.aspx/user32/GetRawInputDeviceInfo%20.html
            </remarks>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoMouse.ID">
            <summary>
            The identifier of the mouse device.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoMouse.NumberOfButtons">
            <summary>
            The number of buttons for the mouse.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoMouse.SampleRate">
            <summary>
            The number of data points per second. This information may not be applicable for every mouse device.
            </summary>
        </member>
        <member name="F:WinApi.User32.RidDeviceInfoMouse.HasHorizontalWheel">
            <summary>
            TRUE if the mouse has a wheel for horizontal scrolling; otherwise, FALSE.
            </summary>
        </member>
        <member name="T:WinApi.User32.SetWindowsHookExType">
            <summary>
            Enumerates the valid hook types passed into a call to SetWindowsHookEx.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa
            http://www.pinvoke.net/default.aspx/Enums/HookType.html
            </remarks>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_MSGFILTER">
            <summary>
            Installs a hook procedure that monitors messages generated as a result of an
            input event in a dialog box, message box, menu, or scroll bar. For more
            information, see the MessageProc hook procedure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_JOURNALRECORD">
            <summary>
            Installs a hook procedure that records input messages posted to the system
            message queue. This hook is useful for recording macros. For more information,
            see the JournalRecordProc hook procedure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_JOURNALPLAYBACK">
            <summary>
            Installs a hook procedure that posts messages previously recorded by a
            WH_JOURNALRECORD hook procedure. For more information, see the
            JournalPlaybackProc hook procedure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_KEYBOARD">
            <summary>
            Installs a hook procedure that monitors keystroke messages. For more information,
            see the KeyboardProc hook procedure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_GETMESSAGE">
            <summary>
            Installs a hook procedure that monitors messages posted to a message queue. For
            more information, see the GetMsgProc hook procedure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_CALLWNDPROC">
            <summary>
            Installs a hook procedure that monitors messages before the system sends them to
            the destination window procedure. For more information, see the CallWndProc
            hook procedure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_CBT">
            <summary>
            Installs a hook procedure that receives notifications useful to a CBT
            application. For more information, see the CBTProc hook procedure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_SYSMSGFILTER">
            <summary>
            Installs a hook procedure that monitors messages generated as a result of an input
            event in a dialog box, message box, menu, or scroll bar. The hook procedure monitors
            these messages for all applications in the same desktop as the calling thread. For
            more information, see the SysMsgProc hook procedure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_MOUSE">
            <summary>
            Installs a hook procedure that monitors mouse messages. For more information, see
            the MouseProc hook procedure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_DEBUG">
            <summary>
            Installs a hook procedure useful for debugging other hook procedures. For more
            information, see the DebugProc hook procedure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_SHELL">
            <summary>
            Installs a hook procedure that receives notifications useful to shell
            applications. For more information, see the ShellProc hook procedure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_FOREGROUNDIDLE">
            <summary>
            Installs a hook procedure that will be called when the application's foreground thread
            is about to become idle. This hook is useful for performing low priority tasks during
            idle time. For more information, see the ForegroundIdleProc hook procedure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_CALLWNDPROCRET">
            <summary>
            Installs a hook procedure that monitors messages after they have been processed by the
            destination window procedure. For more information, see the CallWndRetProc hook procedure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_KEYBOARD_LL">
            <summary>
            Installs a hook procedure that monitors low-level keyboard input events. For more
            information, see the LowLevelKeyboardProc hook procedure. 
            </summary>
        </member>
        <member name="F:WinApi.User32.SetWindowsHookExType.WH_MOUSE_LL">
            <summary>
            Installs a hook procedure that monitors low-level mouse input events. For more
            information, see the LowLevelMouseProc hook procedure. 
            </summary>
        </member>
        <member name="T:WinApi.User32.WinUserMessage">
            <summary>
            Contains message information from a thread's message queue.
            </summary>
            <remarks>
            https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-msg
            </remarks>
        </member>
        <member name="F:WinApi.User32.WinUserMessage.hwnd">
            <summary>
            A handle to the window whose window procedure receives the message. This member is NULL when the message is a thread message.
            </summary>
        </member>
        <member name="F:WinApi.User32.WinUserMessage.message">
            <summary>
            The message identifier. Applications can only use the low word; the high word is reserved by the system.
            </summary>
        </member>
        <member name="F:WinApi.User32.WinUserMessage.wParam">
            <summary>
            Additional information about the message. The exact meaning depends on the value of the message member.
            </summary>
        </member>
        <member name="F:WinApi.User32.WinUserMessage.lParam">
            <summary>
            Additional information about the message. The exact meaning depends on the value of the message member.
            </summary>
        </member>
        <member name="F:WinApi.User32.WinUserMessage.time">
            <summary>
            The time at which the message was posted.
            </summary>
        </member>
        <member name="F:WinApi.User32.WinUserMessage.pt_x">
            <summary>
            The cursor x position, in screen coordinates, when the message was posted.
            </summary>
        </member>
        <member name="F:WinApi.User32.WinUserMessage.pt_y">
            <summary>
            The cursor y position, in screen coordinates, when the message was posted.
            </summary>
        </member>
        <member name="F:WinApi.User32.WinUserMessage.lprivate">
            <summary>
            undocumented.
            </summary>
        </member>
        <member name="T:WinApi.Utility">
            <summary>
            Helper methods.
            </summary>
        </member>
        <member name="M:WinApi.Utility.MakePointer(System.Byte[],System.Int32)">
            <summary>
            Converts consecutive bytes to a pointer. Bytes are read in big endianess. Pointer length
            is host system pointer size.
            </summary>
            <param name="bytes">Byte array to read.</param>
            <param name="offset">Starting offset containing pointer.</param>
            <returns>Pointer.</returns>
        </member>
        <member name="M:WinApi.Utility.MakePointerBigEndian(System.Byte[],System.Int32)">
            <summary>
            Converts consecutive bytes to a pointer. Bytes are read in big endianess. Pointer length
            is host system pointer size.
            </summary>
            <param name="bytes">Byte array to read.</param>
            <param name="offset">Starting offset containing pointer.</param>
            <returns>Pointer.</returns>
        </member>
        <member name="M:WinApi.Utility.MakePointerBigEndian32(System.Byte[],System.Int32)">
            <summary>
            Converts consecutive bytes to a pointer. Bytes are read in big endianess. Pointer length
            is 32 bits.
            </summary>
            <param name="bytes">Byte array to read.</param>
            <param name="offset">Starting offset containing pointer.</param>
            <returns>Pointer.</returns>
        </member>
        <member name="M:WinApi.Utility.MakePointerBigEndian64(System.Byte[],System.Int32)">
            <summary>
            Converts consecutive bytes to a pointer. Bytes are read in big endianess. Pointer length
            is 64 bits.
            </summary>
            <param name="bytes">Byte array to read.</param>
            <param name="offset">Starting offset containing pointer.</param>
            <returns>Pointer.</returns>
        </member>
        <member name="M:WinApi.Utility.MakePointerLittleEndian(System.Byte[],System.Int32)">
            <summary>
            Converts consecutive bytes to a pointer. Bytes are read in litle endianess. Pointer length
            is host system pointer size.
            </summary>
            <param name="bytes">Byte array to read.</param>
            <param name="offset">Starting offset containing pointer.</param>
            <returns>Pointer.</returns>
        </member>
        <member name="M:WinApi.Utility.MakePointerLittleEndian32(System.Byte[],System.Int32)">
            <summary>
            Converts consecutive bytes to a pointer. Bytes are read in litle endianess. Pointer length
            is 32 bits.
            </summary>
            <param name="bytes">Byte array to read.</param>
            <param name="offset">Starting offset containing pointer.</param>
            <returns>Pointer.</returns>
        </member>
        <member name="M:WinApi.Utility.MakePointerLittleEndian64(System.Byte[],System.Int32)">
            <summary>
            Converts consecutive bytes to a pointer. Bytes are read in litle endianess. Pointer length
            is 64 bits.
            </summary>
            <param name="bytes">Byte array to read.</param>
            <param name="offset">Starting offset containing pointer.</param>
            <returns>Pointer.</returns>
        </member>
        <member name="M:WinApi.Utility.UsagePageAndUsageToString(System.Int32,System.Int32)">
            <summary>
            Converts usage page and usage into a friendly name.
            </summary>
            <param name="usagePageRaw">Usage page.</param>
            <param name="usageRaw">Usage from usage page.</param>
            <returns>Converted value, or originial int if not found.</returns>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="M:WinApi.Utility.UsagePageToString(System.Int32)">
            <summary>
            Converts usage page into a friendly name.
            </summary>
            <param name="usagePageRaw">Usage page.</param>
            <returns>Converted value, or originial int if not found.</returns>
            <remarks>
            https://www.freebsddiary.org/APC/usb_hid_usages.php
            </remarks>
        </member>
        <member name="T:WinApi.Windows.Keys">
            <summary>
            Windows keycodes.
            </summary>
            <remarks>
            Extracted from
            https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.keys?view=netframework-4.8
            .
            </remarks>
        </member>
        <member name="F:WinApi.Windows.Keys.A">
            <summary>
            The A key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Add">
            <summary>
            The add key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Alt">
            <summary>
            The ALT modifier key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Apps">
            <summary>
            The application key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Attn">
            <summary>
            The ATTN key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.B">
            <summary>
            The B key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Back">
            <summary>
            The BACKSPACE key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.BrowserBack">
            <summary>
            The browser back key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.BrowserFavorites">
            <summary>
            The browser favorites key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.BrowserForward">
            <summary>
            The browser forward key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.BrowserHome">
            <summary>
            The browser home key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.BrowserRefresh">
            <summary>
            The browser refresh key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.BrowserSearch">
            <summary>
            The browser search key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.BrowserStop">
            <summary>
            The browser stop key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.C">
            <summary>
            The C key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Cancel">
            <summary>
            The CANCEL key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Capital">
            <summary>
            The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.CapsLock">
            <summary>
            The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Clear">
            <summary>
            The CLEAR key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Control">
            <summary>
            The CTRL modifier key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.ControlKey">
            <summary>
            The CTRL key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Crsel">
            <summary>
            The CRSEL key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.D">
            <summary>
            The D key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.D0">
            <summary>
            The 0 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.D1">
            <summary>
            The 1 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.D2">
            <summary>
            The 2 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.D3">
            <summary>
            The 3 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.D4">
            <summary>
            The 4 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.D5">
            <summary>
            The 5 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.D6">
            <summary>
            The 6 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.D7">
            <summary>
            The 7 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.D8">
            <summary>
            The 8 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.D9">
            <summary>
            The 9 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Decimal">
            <summary>
            The decimal key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Delete">
            <summary>
            The DEL key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Divide">
            <summary>
            The divide key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Down">
            <summary>
            The DOWN ARROW key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.E">
            <summary>
            The E key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.End">
            <summary>
            The END key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Enter">
            <summary>
            The ENTER key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.EraseEof">
            <summary>
            The ERASE EOF key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Escape">
            <summary>
            The ESC key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Execute">
            <summary>
            The EXECUTE key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Exsel">
            <summary>
            The EXSEL key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F">
            <summary>
            The F key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F1">
            <summary>
            The F1 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F10">
            <summary>
            The F10 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F11">
            <summary>
            The F11 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F12">
            <summary>
            The F12 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F13">
            <summary>
            The F13 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F14">
            <summary>
            The F14 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F15">
            <summary>
            The F15 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F16">
            <summary>
            The F16 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F17">
            <summary>
            The F17 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F18">
            <summary>
            The F18 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F19">
            <summary>
            The F19 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F2">
            <summary>
            The F2 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F20">
            <summary>
            The F20 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F21">
            <summary>
            The F21 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F22">
            <summary>
            The F22 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F23">
            <summary>
            The F23 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F24">
            <summary>
            The F24 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F3">
            <summary>
            The F3 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F4">
            <summary>
            The F4 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F5">
            <summary>
            The F5 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F6">
            <summary>
            The F6 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F7">
            <summary>
            The F7 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F8">
            <summary>
            The F8 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.F9">
            <summary>
            The F9 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.FinalMode">
            <summary>
            The IME final mode key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.G">
            <summary>
            The G key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.H">
            <summary>
            The H key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.HanguelMode">
            <summary>
            The IME Hanguel mode key. (maintained for compatibility; use <code data-dev-comment-type="langword">HangulMode</code>)
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.HangulMode">
            <summary>
            The IME Hangul mode key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.HanjaMode">
            <summary>
            The IME Hanja mode key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Help">
            <summary>
            The HELP key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Home">
            <summary>
            The HOME key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.I">
            <summary>
            The I key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.IMEAccept">
            <summary>
            The IME accept key, replaces <a class="xref" href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.keys?view=netframework-4.8#System_Windows_Forms_Keys_IMEAceept" data-linktype="relative-path">IMEAceept</a>.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.IMEAceept">
            <summary>
            The IME accept key. Obsolete, use <a class="xref" href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.keys?view=netframework-4.8#System_Windows_Forms_Keys_IMEAccept" data-linktype="relative-path">IMEAccept</a> instead.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.IMEConvert">
            <summary>
            The IME convert key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.IMEModeChange">
            <summary>
            The IME mode change key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.IMENonconvert">
            <summary>
            The IME nonconvert key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Insert">
            <summary>
            The INS key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.J">
            <summary>
            The J key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.JunjaMode">
            <summary>
            The IME Junja mode key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.K">
            <summary>
            The K key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.KanaMode">
            <summary>
            The IME Kana mode key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.KanjiMode">
            <summary>
            The IME Kanji mode key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.KeyCode">
            <summary>
            The bitmask to extract a key code from a key value.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.L">
            <summary>
            The L key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.LaunchApplication1">
            <summary>
            The start application one key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.LaunchApplication2">
            <summary>
            The start application two key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.LaunchMail">
            <summary>
            The launch mail key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.LButton">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.LControlKey">
            <summary>
            The left CTRL key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Left">
            <summary>
            The LEFT ARROW key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.LineFeed">
            <summary>
            The LINEFEED key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.LMenu">
            <summary>
            The left ALT key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.LShiftKey">
            <summary>
            The left SHIFT key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.LWin">
            <summary>
            The left Windows logo key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.M">
            <summary>
            The M key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.MButton">
            <summary>
            The middle mouse button (three-button mouse).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.MediaNextTrack">
            <summary>
            The media next track key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.MediaPlayPause">
            <summary>
            The media play pause key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.MediaPreviousTrack">
            <summary>
            The media previous track key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.MediaStop">
            <summary>
            The media Stop key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Menu">
            <summary>
            The ALT key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Modifiers">
            <summary>
            The bitmask to extract modifiers from a key value.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Multiply">
            <summary>
            The multiply key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.N">
            <summary>
            The N key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Next">
            <summary>
            The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.NoName">
            <summary>
            A constant reserved for future use.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.None">
            <summary>
            No key pressed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.NumLock">
            <summary>
            The NUM LOCK key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.NumPad0">
            <summary>
            The 0 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.NumPad1">
            <summary>
            The 1 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.NumPad2">
            <summary>
            The 2 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.NumPad3">
            <summary>
            The 3 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.NumPad4">
            <summary>
            The 4 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.NumPad5">
            <summary>
            The 5 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.NumPad6">
            <summary>
            The 6 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.NumPad7">
            <summary>
            The 7 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.NumPad8">
            <summary>
            The 8 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.NumPad9">
            <summary>
            The 9 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.O">
            <summary>
            The O key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Oem1">
            <summary>
            The OEM 1 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Oem102">
            <summary>
            The OEM 102 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Oem2">
            <summary>
            The OEM 2 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Oem3">
            <summary>
            The OEM 3 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Oem4">
            <summary>
            The OEM 4 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Oem5">
            <summary>
            The OEM 5 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Oem6">
            <summary>
            The OEM 6 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Oem7">
            <summary>
            The OEM 7 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Oem8">
            <summary>
            The OEM 8 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.OemBackslash">
            <summary>
            The OEM angle bracket or backslash key on the RT 102 key keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.OemClear">
            <summary>
            The CLEAR key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.OemCloseBrackets">
            <summary>
            The OEM close bracket key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Oemcomma">
            <summary>
            The OEM comma key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.OemMinus">
            <summary>
            The OEM minus key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.OemOpenBrackets">
            <summary>
            The OEM open bracket key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.OemPeriod">
            <summary>
            The OEM period key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.OemPipe">
            <summary>
            The OEM pipe key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Oemplus">
            <summary>
            The OEM plus key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.OemQuestion">
            <summary>
            The OEM question mark key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.OemQuotes">
            <summary>
            The OEM singled/double quote key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.OemSemicolon">
            <summary>
            The OEM Semicolon key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Oemtilde">
            <summary>
            The OEM tilde key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.P">
            <summary>
            The P key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Pa1">
            <summary>
            The PA1 key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Packet">
            <summary>
            Used to pass Unicode characters as if they were keystrokes. The Packet key value is the low word of a 32-bit virtual-key value used for non-keyboard input methods.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.PageDown">
            <summary>
            The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.PageUp">
            <summary>
            The PAGE UP key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Pause">
            <summary>
            The PAUSE key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Play">
            <summary>
            The PLAY key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Print">
            <summary>
            The PRINT key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.PrintScreen">
            <summary>
            The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Prior">
            <summary>
            The PAGE UP key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.ProcessKey">
            <summary>
            The PROCESS KEY key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Q">
            <summary>
            The Q key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.R">
            <summary>
            The R key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.RButton">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.RControlKey">
            <summary>
            The right CTRL key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Return">
            <summary>
            The RETURN key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Right">
            <summary>
            The RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.RMenu">
            <summary>
            The right ALT key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.RShiftKey">
            <summary>
            The right SHIFT key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.RWin">
            <summary>
            The right Windows logo key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.S">
            <summary>
            The S key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Scroll">
            <summary>
            The SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Select">
            <summary>
            The SELECT key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.SelectMedia">
            <summary>
            The select media key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Separator">
            <summary>
            The separator key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Shift">
            <summary>
            The SHIFT modifier key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.ShiftKey">
            <summary>
            The SHIFT key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Sleep">
            <summary>
            The computer sleep key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Snapshot">
            <summary>
            The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Space">
            <summary>
            The SPACEBAR key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Subtract">
            <summary>
            The subtract key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.T">
            <summary>
            The T key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Tab">
            <summary>
            The TAB key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.U">
            <summary>
            The U key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Up">
            <summary>
            The UP ARROW key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.V">
            <summary>
            The V key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.VolumeDown">
            <summary>
            The volume down key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.VolumeMute">
            <summary>
            The volume mute key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.VolumeUp">
            <summary>
            The volume up key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.W">
            <summary>
            The W key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.X">
            <summary>
            The X key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.XButton1">
            <summary>
            The first x mouse button (five-button mouse).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.XButton2">
            <summary>
            The second x mouse button (five-button mouse).
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Y">
            <summary>
            The Y key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Z">
            <summary>
            The Z key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.Keys.Zoom">
            <summary>
            The ZOOM key.
            </summary>
        </member>
        <member name="T:WinApi.Windows.WindowsMessages">
            <summary>
            Windows Messages.
            </summary>
            <remarks>
            http://www.pinvoke.net/default.aspx/Enums/WindowsMessages.html
            </remarks>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NULL">
            <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CREATE">
            <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.DESTROY">
            <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen.
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
            /// </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MOVE">
            <summary>
            The WM_MOVE message is sent after a window has been moved.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.ACTIVATE">
            <summary>
            The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SETFOCUS">
            <summary>
            The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.KILLFOCUS">
            <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.ENABLE">
            <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SETTEXT">
            <summary>
            An application sends a WM_SETTEXT message to set the text of a window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.GETTEXT">
            <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.GETTEXTLENGTH">
            <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CLOSE">
            <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.QUERYENDSESSION">
            <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
            After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.QUERYOPEN">
            <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.ENDSESSION">
            <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.QUIT">
            <summary>
            The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SYSCOLORCHANGE">
            <summary>
            This message is sent to all top-level windows when a change is made to a system color setting.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SHOWWINDOW">
            <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.WININICHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SETTINGCHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.DEVMODECHANGE">
            <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.ACTIVATEAPP">
            <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.FONTCHANGE">
            <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.TIMECHANGE">
            <summary>
            A message that is sent whenever there is a change in the system time.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CANCELMODE">
            <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SETCURSOR">
            <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MOUSEACTIVATE">
            <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CHILDACTIVATE">
            <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.QUEUESYNC">
            <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.GETMINMAXINFO">
            <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.PAINTICON">
            <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.ICONERASEBKGND">
            <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NEXTDLGCTL">
            <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SPOOLERSTATUS">
            <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.DRAWITEM">
            <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MEASUREITEM">
            <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.DELETEITEM">
            <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.VKEYTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CHARTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SETFONT">
            <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.GETFONT">
            <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SETHOTKEY">
            <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.GETHOTKEY">
            <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.QUERYDRAGICON">
            <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.COMPAREITEM">
            <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.GETOBJECT">
            <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application.
            Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.COMPACTING">
            <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.COMMNOTIFY">
            <summary>
            WM_COMMNOTIFY is Obsolete for Win32-Based Applications
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.WINDOWPOSCHANGING">
            <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.WINDOWPOSCHANGED">
            <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.POWER">
            <summary>
            Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
            Use: POWERBROADCAST
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.COPYDATA">
            <summary>
            An application sends the WM_COPYDATA message to pass data to another application.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CANCELJOURNAL">
            <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NOTIFY">
            <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.INPUTLANGCHANGEREQUEST">
            <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.INPUTLANGCHANGE">
            <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.TCARD">
            <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HELP">
            <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.USERCHANGED">
            <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NOTIFYFORMAT">
            <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CONTEXTMENU">
            <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.STYLECHANGING">
            <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.STYLECHANGED">
            <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.DISPLAYCHANGE">
            <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.GETICON">
            <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SETICON">
            <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCCREATE">
            <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCDESTROY">
            <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window.
            The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.GETDLGCODE">
            <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SYNCPAINT">
            <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCMOUSEMOVE">
            <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCLBUTTONDOWN">
            <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCLBUTTONUP">
            <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCLBUTTONDBLCLK">
            <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCRBUTTONDOWN">
            <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCRBUTTONDBLCLK">
            <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCMBUTTONDOWN">
            <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCMBUTTONUP">
            <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCMBUTTONDBLCLK">
            <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCXBUTTONDOWN">
            <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCXBUTTONUP">
            <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCXBUTTONDBLCLK">
            <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.INPUT_DEVICE_CHANGE">
            <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.INPUT">
            <summary>
            The WM_INPUT message is sent to the window that is getting raw input.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.KEYFIRST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CHAR">
            <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.DEADCHAR">
            <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SYSCHAR">
            <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SYSDEADCHAR">
            <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.UNICHAR">
            <summary>
            The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed.
            The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can can handle Unicode Supplementary Plane characters.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.KEYLAST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.IME_STARTCOMPOSITION">
            <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.IME_ENDCOMPOSITION">
            <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.IME_COMPOSITION">
            <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.INITDIALOG">
            <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.COMMAND">
            <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a command from the Window menu, clicks the maximize button, minimize button, restore button, close button, or moves the form. You can stop the form from moving by filtering this out.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.TIMER">
            <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HSCROLL">
            <summary>
            The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.VSCROLL">
            <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.INITMENU">
            <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.INITMENUPOPUP">
            <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MENUSELECT">
            <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MENUCHAR">
            <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.ENTERIDLE">
            <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MENURBUTTONUP">
            <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MENUDRAG">
            <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MENUGETOBJECT">
            <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.UNINITMENUPOPUP">
            <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MENUCOMMAND">
            <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CHANGEUISTATE">
            <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.UPDATEUISTATE">
            <summary>
            An application sends the WM_UPDATEUISTATE message to change the user interface (UI) state for the specified window and all its child windows.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.QUERYUISTATE">
            <summary>
            An application sends the WM_QUERYUISTATE message to retrieve the user interface (UI) state for a window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CTLCOLORMSGBOX">
            <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CTLCOLOREDIT">
            <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CTLCOLORLISTBOX">
            <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CTLCOLORBTN">
            <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CTLCOLORDLG">
            <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CTLCOLORSCROLLBAR">
            <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CTLCOLORSTATIC">
            <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MOUSEFIRST">
            <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MBUTTONDBLCLK">
            <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.XBUTTONDOWN">
            <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.XBUTTONUP">
            <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.XBUTTONDBLCLK">
            <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MOUSEHWHEEL">
            <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MOUSELAST">
            <summary>
            Use WM_MOUSELAST to specify the last mouse message. Used with PeekMessage() Function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.PARENTNOTIFY">
            <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.ENTERMENULOOP">
            <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.EXITMENULOOP">
            <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NEXTMENU">
            <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SIZING">
            <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CAPTURECHANGED">
            <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MOVING">
            <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.POWERBROADCAST">
            <summary>
            Notifies applications that a power-management event has occurred.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.DEVICECHANGE">
            <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MDICREATE">
            <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MDIDESTROY">
            <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MDIACTIVATE">
            <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MDIRESTORE">
            <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MDINEXT">
            <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MDIMAXIMIZE">
            <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MDITILE">
            <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MDICASCADE">
            <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MDIICONARRANGE">
            <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MDIGETACTIVE">
            <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MDISETMENU">
            <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.ENTERSIZEMOVE">
            <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
            The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.EXITSIZEMOVE">
            <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.DROPFILES">
            <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MDIREFRESHMENU">
            <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.IME_SETCONTEXT">
            <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.IME_NOTIFY">
            <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.IME_CONTROL">
            <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.IME_COMPOSITIONFULL">
            <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.IME_SELECT">
            <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.IME_CHAR">
            <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.IME_REQUEST">
            <summary>
            Sent to an application to provide commands and request information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.IME_KEYDOWN">
            <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.IME_KEYUP">
            <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MOUSEHOVER">
            <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.MOUSELEAVE">
            <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCMOUSEHOVER">
            <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.NCMOUSELEAVE">
            <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.WTSSESSION_CHANGE">
            <summary>
            The WM_WTSSESSION_CHANGE message notifies applications of changes in session state.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CUT">
            <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.COPY">
            <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.PASTE">
            <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CLEAR">
            <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.UNDO">
            <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.RENDERFORMAT">
            <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.RENDERALLFORMATS">
            <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.DESTROYCLIPBOARD">
            <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.DRAWCLIPBOARD">
            <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.PAINTCLIPBOARD">
            <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.VSCROLLCLIPBOARD">
            <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SIZECLIPBOARD">
            <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.ASKCBFORMATNAME">
            <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CHANGECBCHAIN">
            <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HSCROLLCLIPBOARD">
            <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.QUERYNEWPALETTE">
            <summary>
            This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.PALETTEISCHANGING">
            <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.PALETTECHANGED">
            <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette.
            This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HOTKEY">
            <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.PRINT">
            <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.PRINTCLIENT">
            <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.APPCOMMAND">
            <summary>
            The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.THEMECHANGED">
            <summary>
            The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CLIPBOARDUPDATE">
            <summary>
            Sent when the contents of the clipboard have changed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.DWMCOMPOSITIONCHANGED">
            <summary>
            The system will send a window the WM_DWMCOMPOSITIONCHANGED message to indicate that the availability of desktop composition has changed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.DWMNCRENDERINGCHANGED">
            <summary>
            WM_DWMNCRENDERINGCHANGED is called when the non-client area rendering status of a window has changed. Only windows that have set the flag DWM_BLURBEHIND.fTransitionOnMaximized to true will get this message.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.DWMCOLORIZATIONCOLORCHANGED">
            <summary>
            Sent to all top-level windows when the colorization color has changed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.DWMWINDOWMAXIMIZEDCHANGE">
            <summary>
            WM_DWMWINDOWMAXIMIZEDCHANGE will let you know when a DWM composed window is maximized. You also have to register for this message as well. You'd have other windowd go opaque when this message is sent.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.GETTITLEBARINFOEX">
            <summary>
            Sent to request extended title bar information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.APP">
            <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.USER">
            <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CPL_LAUNCH">
            <summary>
            An application sends the WM_CPL_LAUNCH message to Windows Control Panel to request that a Control Panel application be started.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.CPL_LAUNCHED">
            <summary>
            The WM_CPL_LAUNCHED message is sent when a Control Panel application, started by the WM_CPL_LAUNCH message, has closed. The WM_CPL_LAUNCHED message is sent to the window identified by the wParam parameter of the WM_CPL_LAUNCH message that started the application.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.SYSTIMER">
            <summary>
            WM_SYSTIMER is a well-known yet still undocumented message. Windows uses WM_SYSTIMER for internal actions like scrolling.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HSHELL_ACCESSIBILITYSTATE">
            <summary>
            The accessibility state has changed.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HSHELL_ACTIVATESHELLWINDOW">
            <summary>
            The shell should activate its main window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HSHELL_APPCOMMAND">
            <summary>
            The user completed an input event (for example, pressed an application command button on the mouse or an application command key on the keyboard), and the application did not handle the WM_APPCOMMAND message generated by that input.
            If the Shell procedure handles the WM_COMMAND message, it should not call CallNextHookEx. See the Return Value section for more information.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HSHELL_GETMINRECT">
            <summary>
            A window is being minimized or maximized. The system needs the coordinates of the minimized rectangle for the window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HSHELL_LANGUAGE">
            <summary>
            Keyboard language was changed or a new keyboard layout was loaded.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HSHELL_REDRAW">
            <summary>
            The title of a window in the task bar has been redrawn.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HSHELL_TASKMAN">
            <summary>
            The user has selected the task list. A shell application that provides a task list should return TRUE to prevent Windows from starting its task list.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HSHELL_WINDOWCREATED">
            <summary>
            A top-level, unowned window has been created. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HSHELL_WINDOWDESTROYED">
            <summary>
            A top-level, unowned window is about to be destroyed. The window still exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HSHELL_WINDOWACTIVATED">
            <summary>
            The activation has changed to a different top-level, unowned window.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsMessages.HSHELL_WINDOWREPLACED">
            <summary>
            A top-level window is being replaced. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="T:WinApi.Windows.WindowsPoint">
            <summary>
            The POINT structure defines the x- and y-coordinates of a point.
            </summary>
            <remarks>
            http://pinvoke.net/default.aspx/Structures/POINT.html .
            https://docs.microsoft.com/en-us/windows/win32/api/windef/ns-windef-point
            </remarks>
        </member>
        <member name="F:WinApi.Windows.WindowsPoint.X">
            <summary>
            The x-coordinate of the point.
            </summary>
        </member>
        <member name="F:WinApi.Windows.WindowsPoint.Y">
            <summary>
            The y-coordinate of the point.
            </summary>
        </member>
    </members>
</doc>
